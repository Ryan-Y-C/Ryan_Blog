<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Java8函数式编程 - 标签 - Ryan Blog</title>
        <link>https://ryan-y-c.github.io/tags/java8%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</link>
        <description>Java8函数式编程 - 标签 - Ryan Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sun, 06 Aug 2017 16:51:23 &#43;0800</lastBuildDate><atom:link href="https://ryan-y-c.github.io/tags/java8%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/" rel="self" type="application/rss+xml" /><item>
    <title>Java8函数式编程</title>
    <link>https://ryan-y-c.github.io/java8%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</link>
    <pubDate>Sun, 06 Aug 2017 16:51:23 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://ryan-y-c.github.io/java8%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</guid>
    <description><![CDATA[<h1 id="java-8-函数式编程">Java 8 函数式编程</h1>
<h3 id="什么是函数式编程">什么是函数式编程</h3>
<p>函数式：将一个对象映射成另一个对象</p>
<p>jdk工具类：predicate接口</p>
<ul>
<li>
<p>实现predicate接口，传入一个对象映射成（返回）boolean值。</p>
</li>
<li>
<p>即使不实现predicate接口（满足predicate条件会自动转换成predicate实现），只要方法满足接受一个参照返回一个boolean值就可以使用函数式编程和lambda表达式。</p>
</li>
<li>
<p>使用方法引用减少代码量 类名::静态方法名 （将静态方法转换成函数接口）</p>
<ul>
<li>方法引用可以通过静态方法名解释该操作的行为。</li>
</ul>
</li>
<li>
<p>实现predicate 对象—&gt;boolean</p>
<ul>
<li>1、lambda表达式</li>
<li>2、静态方法</li>
<li>3、实例方法 默认参数是（object this）返回boolean</li>
</ul>
</li>
</ul>
<p>lambda表达式 （参数）-&gt; 操作语句</p>
<ul>
<li>代码简洁，但是不易理解。</li>
<li>超过两行不建议使用lambda表达式</li>
</ul>
<h3 id="java函数接口">java函数接口</h3>
<p>创建函数接口：任何只包含一个抽象方法的接口都可以被自动转换为函数接口
jdk函数接口：</p>
<ul>
<li>
<p>Consumer<T>：处理（消耗）某个对象。</p>
</li>
<li>
<p>BiConsumer&lt;T,U&gt;:同时消耗两个对象。</p>
</li>
<li>
<p>Function&lt;T,R&gt;：将一个类型T映射（变换）成另一个类型R。</p>
</li>
<li>
<p>BiFunction&lt;T,U,R&gt; :将两个对象映射成一个对象。</p>
</li>
<li>
<p>Supplier<T>:T get（）生产对象。</p>
</li>
<li>
<p>BooleanSupplier：创建boolean值</p>
</li>
</ul>
<h3 id="函数式编程comparator">函数式编程Comparator</h3>
<p>使用Comparator创建TreeSet排序规则</p>
<p>数据丢失问题，Set认为重复数据会去除重复数据。</p>]]></description>
</item></channel>
</rss>
