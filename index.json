[{"categories":["学习笔记"],"content":"Java程序的部署 分布式 1、负载均衡 2、容灾（单点故障） 数据一致性 多台设备使用统一个数据库-单一数据源 HTTP是无状态的 ","date":"2017-09-25","objectID":"/java%E7%A8%8B%E5%BA%8F%E7%9A%84%E9%83%A8%E7%BD%B2/:0:0","tags":["学习笔记"],"title":"Java程序的部署","uri":"/java%E7%A8%8B%E5%BA%8F%E7%9A%84%E9%83%A8%E7%BD%B2/"},{"categories":["学习笔记"],"content":"部署 监听端口 响应HTTP请求 进行预定义的业务逻辑处理 部署的版本需要不停的进行更新（分布式更新） ","date":"2017-09-25","objectID":"/java%E7%A8%8B%E5%BA%8F%E7%9A%84%E9%83%A8%E7%BD%B2/:0:1","tags":["学习笔记"],"title":"Java程序的部署","uri":"/java%E7%A8%8B%E5%BA%8F%E7%9A%84%E9%83%A8%E7%BD%B2/"},{"categories":["学习笔记"],"content":"分布和部署要解决的问题 环境问题 开发环境（测试环境） 预发布环境（预生产环境） 生产环境（正式环境） 环境兼容问题 硬件/软件 数据库等 ","date":"2017-09-25","objectID":"/java%E7%A8%8B%E5%BA%8F%E7%9A%84%E9%83%A8%E7%BD%B2/:0:2","tags":["学习笔记"],"title":"Java程序的部署","uri":"/java%E7%A8%8B%E5%BA%8F%E7%9A%84%E9%83%A8%E7%BD%B2/"},{"categories":["学习笔记"],"content":"发布和部署Java程序 要解决的问题 编写的代码 所依赖的第三方库 你所依赖的特殊环境配置（数据库/缓存等） 稳定性 升级和回滚 ","date":"2017-09-25","objectID":"/java%E7%A8%8B%E5%BA%8F%E7%9A%84%E9%83%A8%E7%BD%B2/:0:3","tags":["学习笔记"],"title":"Java程序的部署","uri":"/java%E7%A8%8B%E5%BA%8F%E7%9A%84%E9%83%A8%E7%BD%B2/"},{"categories":["学习笔记"],"content":"1：使用Maven exec plugin [exec官方文档] https://www.mojohaus.org/exec-maven-plugin/ 导入maven依赖 \u003cplugin\u003e \u003cgroupId\u003eorg.codehaus.mojo\u003c/groupId\u003e \u003cartifactId\u003eexec-maven-plugin\u003c/artifactId\u003e \u003cversion\u003e3.0.0\u003c/version\u003e \u003cconfiguration\u003e \u003cexecutable\u003ejava\u003c/executable\u003e \u003carguments\u003e \u003cargument\u003e-classpath\u003c/argument\u003e \u003c!-- automatically creates the classpath using all project dependencies, also adding the project build directory --\u003e \u003cclasspath/\u003e \u003cargument\u003ecom.example.Main\u003c/argument\u003e \u003c/arguments\u003e \u003c/configuration\u003e \u003c/plugin\u003e 运行时加-x参数可以查看详细日志 自动将所有的传递性依赖加入 优点：简单 缺点：不适用于自动化的场景 ","date":"2017-09-25","objectID":"/java%E7%A8%8B%E5%BA%8F%E7%9A%84%E9%83%A8%E7%BD%B2/:1:0","tags":["学习笔记"],"title":"Java程序的部署","uri":"/java%E7%A8%8B%E5%BA%8F%E7%9A%84%E9%83%A8%E7%BD%B2/"},{"categories":["学习笔记"],"content":"2：jar包 运行mvn命令创造jar包 mvn package 使用 java -jar [jar包名字] 启动程序 java -classpath com.github.Main 解决jar包文件不完整问题 [相关blog] https://www.cnblogs.com/thinking-better/p/7827368.html \u003cplugin\u003e \u003cgroupId\u003eorg.springframework.boot\u003c/groupId\u003e \u003cartifactId\u003espring-boot-maven-plugin\u003c/artifactId\u003e \u003cversion\u003e1.5.3.RELEASE\u003c/version\u003e \u003cconfiguration\u003e \u003cmainClass\u003ecom.github.hcsp.Application\u003c/mainClass\u003e \u003c/configuration\u003e \u003cexecutions\u003e \u003cexecution\u003e \u003cgoals\u003e \u003cgoal\u003erepackage\u003c/goal\u003e \u003c/goals\u003e \u003c/execution\u003e \u003c/executions\u003e \u003c/plugin\u003e 设置程序端口 java -jar -Dserver.port=8081 target\\spring-aop-redis-mysql-0.0.1.jar jar包 编译后的代码打包 可以直接运行的jar包 jar包与Manifest 优点：简单可靠 缺点：依赖于JVM环境 ","date":"2017-09-25","objectID":"/java%E7%A8%8B%E5%BA%8F%E7%9A%84%E9%83%A8%E7%BD%B2/:2:0","tags":["学习笔记"],"title":"Java程序的部署","uri":"/java%E7%A8%8B%E5%BA%8F%E7%9A%84%E9%83%A8%E7%BD%B2/"},{"categories":["学习笔记"],"content":"Docker 创建Dockerfile FROM java:openjdk-8u111-alpine RUN mkdir /app WORKDIR /app COPY target/spring-aop-redis-mysql-0.0.1.jar /app EXPOSE 8080 CMD [\"java\",\"-jar\",\"spring-aop-redis-mysql-0.0.1.jar\"] 运行 //docker build .//创建镜像 创建application.properties配置文件 # 请勿改变数据库名、端口、用户名及密码 spring.datasource.url=jdbc:mysql://localhost:3306/mall?characterEncoding=utf-8 spring.datasource.username=root spring.datasource.password=123456 # 请勿改变Redis端口号 spring.redis.host=localhost spring.redis.port=6379 spring.aop.proxy-target-class=true mybatis.config-location=classpath:db/mybatis/config.xml 运行容器 $ docker run -p 8082:8080 -v J:/lean/spring-aop-redis-mysql/application.properties:/app/config/application.properties a7dad994b5b2 Docker运行Java程序 Docker运行数据库 Docker运行Redis Docker运行 ","date":"2017-09-25","objectID":"/java%E7%A8%8B%E5%BA%8F%E7%9A%84%E9%83%A8%E7%BD%B2/:3:0","tags":["学习笔记"],"title":"Java程序的部署","uri":"/java%E7%A8%8B%E5%BA%8F%E7%9A%84%E9%83%A8%E7%BD%B2/"},{"categories":["学习笔记"],"content":"Nginx 创建nginx容器 $ docker run --restart=always -v J:/lean/spring-aop-redis-mysql/deploy/nginx.conf:/etc/nginx/nginx.conf:ro -p 80:80 -d nginx [nginx官网] http://nginx.org/en/docs/http/load_balancing.html http { upstream myapp1 { server srv1.example.com; server srv2.example.com; server srv3.example.com; } server { listen 80; location / { proxy_pass http://myapp1; } } } ","date":"2017-09-25","objectID":"/java%E7%A8%8B%E5%BA%8F%E7%9A%84%E9%83%A8%E7%BD%B2/:3:1","tags":["学习笔记"],"title":"Java程序的部署","uri":"/java%E7%A8%8B%E5%BA%8F%E7%9A%84%E9%83%A8%E7%BD%B2/"},{"categories":["学习笔记"],"content":"查看咱用80端口的进程 netstat -aon | findstr \"80\" 查看对应进程的程序 tasklist | findstr \"4\" 删除对应进程 taskkill /pid 4 /F 查看占用80端口的服务 netsh http show servicestate ","date":"2017-09-25","objectID":"/java%E7%A8%8B%E5%BA%8F%E7%9A%84%E9%83%A8%E7%BD%B2/:3:2","tags":["学习笔记"],"title":"Java程序的部署","uri":"/java%E7%A8%8B%E5%BA%8F%E7%9A%84%E9%83%A8%E7%BD%B2/"},{"categories":["学习笔记"],"content":"持续集成实战：Docker原理 保证开发、测试、交付、部署的环境完全一致 保证资源的隔离 启动临时的、用完即弃的环境，例如测试 迅速超大规模部署和扩容 ","date":"2017-09-22","objectID":"/docker%E5%8E%9F%E7%90%86/:0:0","tags":["学习笔记"],"title":"Docker原理","uri":"/docker%E5%8E%9F%E7%90%86/"},{"categories":["学习笔记"],"content":"Docker的基本概念 镜像（image） 一个预先定义好的模板文件，Docker引擎可以按照这个模板文件启动无数个一摸一样的，互不干扰 容器（container） 一台虚拟的计算机，拥有独立的： 网络 文件系统 进程 默认和宿主机不发生任何交互 意味着数据是没有持久化的 it参数会启动docker交互式命令行模式，会显示报错信息 docker run -it mysql ","date":"2017-09-22","objectID":"/docker%E5%8E%9F%E7%90%86/:1:0","tags":["学习笔记"],"title":"Docker原理","uri":"/docker%E5%8E%9F%E7%90%86/"},{"categories":["学习笔记"],"content":"docker pull/images 下载一个指定的镜像，方便随时启动 docker pull mysql:5.7.28下载指定镜像 如果不加tag（版本号）默认是latest（最新版本） registry.cn-beijing.aliyuncs.com/dr1/hcsp:0.0.16 如果不加镜像仓管地址，默认在docker中央仓库获取镜像 docker images 查看本地已有的镜像 ","date":"2017-09-22","objectID":"/docker%E5%8E%9F%E7%90%86/:2:0","tags":["学习笔记"],"title":"Docker原理","uri":"/docker%E5%8E%9F%E7%90%86/"},{"categories":["学习笔记"],"content":"docker run/ps docker run 装载镜像成为一个容器、 通过镜像模板创建出来一个镜像实例 在这个容器看来，自己就是一台独立的计算机 每个容器有一个ID。支持缩写 docker run it \u003c镜像名\u003e \u003c镜像中要运行的命令和参数\u003e 交互式命令行，当前shell中运行，Ctrl-C 退出 启动并进入容器 docker run -d \u003c镜像名\u003e \u003c镜像中要运行的命令和参数\u003e daemon模式，在后台运行 ","date":"2017-09-22","objectID":"/docker%E5%8E%9F%E7%90%86/:3:0","tags":["学习笔记"],"title":"Docker原理","uri":"/docker%E5%8E%9F%E7%90%86/"},{"categories":["学习笔记"],"content":"docker run –name 为容器指定一个名字 –restart=always 遇到错误自动重启 提供统一化软件化交互必不可少的功能 -v \u003c本地容器\u003e:\u003c容器文件\u003e -p \u003c本地端口\u003e:\u003c容器端口\u003e -e name=value - 向容器传递初始化参数，例如设置root密码 镜像名之前是docker参数，镜像名之后是镜像参数 ","date":"2017-09-22","objectID":"/docker%E5%8E%9F%E7%90%86/:4:0","tags":["学习笔记"],"title":"Docker原理","uri":"/docker%E5%8E%9F%E7%90%86/"},{"categories":["学习笔记"],"content":"docker start/stop 启动/停止一个容器 ","date":"2017-09-22","objectID":"/docker%E5%8E%9F%E7%90%86/:5:0","tags":["学习笔记"],"title":"Docker原理","uri":"/docker%E5%8E%9F%E7%90%86/"},{"categories":["学习笔记"],"content":"docker rm 删除一个容器 docker exec（execute执行） 指定目标容器，进入容器执行命令 docker run -it \u003c目标容器ID/名字\u003e\u003c目标命令（通常为bash）\u003e 可以想象成ssh 调试、解决问题必备命令 ","date":"2017-09-22","objectID":"/docker%E5%8E%9F%E7%90%86/:6:0","tags":["学习笔记"],"title":"Docker原理","uri":"/docker%E5%8E%9F%E7%90%86/"},{"categories":["学习笔记"],"content":"docker logs docker logs \u003c容器ID或容器名\u003e 查看目标容器的输出 docker logs -f \u003c容器ID或容器名\u003e 查看目标容器最后几行的输出 ","date":"2017-09-22","objectID":"/docker%E5%8E%9F%E7%90%86/:7:0","tags":["学习笔记"],"title":"Docker原理","uri":"/docker%E5%8E%9F%E7%90%86/"},{"categories":["学习笔记"],"content":"docker inspect 查看容器的详细状态 ","date":"2017-09-22","objectID":"/docker%E5%8E%9F%E7%90%86/:8:0","tags":["学习笔记"],"title":"Docker原理","uri":"/docker%E5%8E%9F%E7%90%86/"},{"categories":["学习笔记"],"content":"docker分层镜像 ubuntu等镜像的基础镜像相同，在不同版本可以在新层增加功能。 ","date":"2017-09-22","objectID":"/docker%E5%8E%9F%E7%90%86/:9:0","tags":["学习笔记"],"title":"Docker原理","uri":"/docker%E5%8E%9F%E7%90%86/"},{"categories":["学习笔记"],"content":"Dockerfile 指定镜像如何生成 编写第一个Dockerfile docker build . 执行当前目录的Dockerfile文件 每个镜像会有一个唯一的ID ","date":"2017-09-22","objectID":"/docker%E5%8E%9F%E7%90%86/:9:1","tags":["学习笔记"],"title":"Docker原理","uri":"/docker%E5%8E%9F%E7%90%86/"},{"categories":["学习笔记"],"content":"Docker的镜像仓库与tag 可以任意对镜像进行tag操作 决定了未来这个镜像会被push到哪里 决定了未来从哪里下载镜像 可以方便的藏剑镜像仓库的私服 – registry-mirror –insecure-registry 指定成http方式 ","date":"2017-09-22","objectID":"/docker%E5%8E%9F%E7%90%86/:9:2","tags":["学习笔记"],"title":"Docker原理","uri":"/docker%E5%8E%9F%E7%90%86/"},{"categories":["学习笔记"],"content":"docker与kubernetes(容器编排引擎) 自动化容器编排引擎 [练习run命令]https://github.com/hcsp/practise-docker-run ","date":"2017-09-22","objectID":"/docker%E5%8E%9F%E7%90%86/:10:0","tags":["学习笔记"],"title":"Docker原理","uri":"/docker%E5%8E%9F%E7%90%86/"},{"categories":["学习笔记"],"content":"正则表达式（更强大的通配符） 用于描述文本/字符串的一组规则 处理文本 提取信息 java转义字符 \\n \\r \\t \\ \\uXXXX ","date":"2017-09-18","objectID":"/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/:0:0","tags":["学习笔记"],"title":"正则表达式","uri":"/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"},{"categories":["学习笔记"],"content":"正则表达式的常用的元字符 符号 含义 ^ 开始位置 $ 结束位置 . 单个任意字符（不一定包含换号符） ?. 可以匹配换行符 \\w 单个“word”字符 字⺟/数字/下划线/汉字 \\s 单个空⽩字符（\\n\\r\\t） \\d 单个数字字符 \\b 单词的开始或结束 符号 重复次数 * 0次或多次 + 1次或多次 ？ 0次或1次 {n} n次 {n,} \u003e=n次 {n,m} n到m次 符号 选择 [aeiou] 单个的a/e/i/o/u字符之⼀ [0-9] 单个数字字符 [A-Z] 单个⼤写字⺟ [A-Z0-9] ⼤写字⺟或者数字或者下划线 Hi |hi等价于[Hh]i Hi或者hi 符号 反义 [^aeiou] 单个的除a/e/i/o/u之外的字符 [^A] 单个⾮x字符 \\W 单个⾮\\w（字⺟/数字/下划线/汉字） \\S 单个⾮\\s（空⽩） \\D 单个⾮\\d（数字）字符 \\B ⾮开头/结束位置 符号 含义 ^\\d{5,12}$ 5到12位的数字 ^(0|[1-9][0-9]*)$ 0或者⾮零开头的数字 ^(-?\\d+)(.\\d+)?$ ⼩数 \\n\\s*\\r 空⽩⾏ ","date":"2017-09-18","objectID":"/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/:0:1","tags":["学习笔记"],"title":"正则表达式","uri":"/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"},{"categories":["学习笔记"],"content":"Java中的正则表达式 String split() 正则表达式分割字符 replaceAll/replaceFirst 替换字符 matches 判断某个值是否匹配 matches 尽量少用或者少编译，因为效率低 Java中的正则表达式是比较消耗资源的 正则表达式需要解析Pattern中的compile负责解析正则表达式 匹配过程非常昂贵 匹配过程具有回溯过程 ","date":"2017-09-18","objectID":"/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/:0:2","tags":["学习笔记"],"title":"正则表达式","uri":"/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"},{"categories":["学习笔记"],"content":"分组与捕获 想要将所有符合正则表达式的⽂本抓出来处理 使⽤括号来指定⼀个被捕获的分组 分组的编号从1开始 分组的编号计算只看左括号 (?:)不捕获和分配编号，括号只⽤于分组或标记优先级 [实战] https://github.com/hcsp/regular-expression-in-action/pull/73 ","date":"2017-09-18","objectID":"/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/:0:3","tags":["学习笔记"],"title":"正则表达式","uri":"/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"},{"categories":["学习笔记"],"content":"Spring生态系统 ","date":"2017-09-11","objectID":"/spring%E7%94%9F%E6%80%81%E7%B3%BB%E7%BB%9F/:0:0","tags":["学习笔记"],"title":"Spring生态系统","uri":"/spring%E7%94%9F%E6%80%81%E7%B3%BB%E7%BB%9F/"},{"categories":["学习笔记"],"content":"Bean配置与Spring MyBatis实战 0、在Spring容器中引入Bean 1、 Spring+MyBatis（H2/MySQL/Postgres） 2、模板引擎（后端渲染HTML） 3、前后端分离和后端渲染 Controller 做HTTP相关业务 Service 做业务代码 Dao 做数据库相关业务 ","date":"2017-09-11","objectID":"/spring%E7%94%9F%E6%80%81%E7%B3%BB%E7%BB%9F/:1:0","tags":["学习笔记"],"title":"Spring生态系统","uri":"/spring%E7%94%9F%E6%80%81%E7%B3%BB%E7%BB%9F/"},{"categories":["学习笔记"],"content":"在resources/static 中的html页面可以在浏览器中获取 ","date":"2017-09-11","objectID":"/spring%E7%94%9F%E6%80%81%E7%B3%BB%E7%BB%9F/:1:1","tags":["学习笔记"],"title":"Spring生态系统","uri":"/spring%E7%94%9F%E6%80%81%E7%B3%BB%E7%BB%9F/"},{"categories":["学习笔记"],"content":"模板引擎freemarker [freemarker Springboot starter]http://zetcode.com/springboot/freemarker/ [freemarker API]https://freemarker.apache.org/docs/ref_directive_list.html [SpringWeb]https://github.com/Ryan-Y-C/SpringDemo 动态代理、AOP与Spring ","date":"2017-09-11","objectID":"/spring%E7%94%9F%E6%80%81%E7%B3%BB%E7%BB%9F/:1:2","tags":["学习笔记"],"title":"Spring生态系统","uri":"/spring%E7%94%9F%E6%80%81%E7%B3%BB%E7%BB%9F/"},{"categories":["学习笔记"],"content":"动态代理与AOP ","date":"2017-09-11","objectID":"/spring%E7%94%9F%E6%80%81%E7%B3%BB%E7%BB%9F/:2:0","tags":["学习笔记"],"title":"Spring生态系统","uri":"/spring%E7%94%9F%E6%80%81%E7%B3%BB%E7%BB%9F/"},{"categories":["学习笔记"],"content":"AOP(Aspect-Oriented-Programming) 面向切面编程 相对于OOP（面向对象编程） AOP是面向切面编程，关注一个统一的切面 AOP和Spring不是同一个东西 ","date":"2017-09-11","objectID":"/spring%E7%94%9F%E6%80%81%E7%B3%BB%E7%BB%9F/:2:1","tags":["学习笔记"],"title":"Spring生态系统","uri":"/spring%E7%94%9F%E6%80%81%E7%B3%BB%E7%BB%9F/"},{"categories":["学习笔记"],"content":"AOP使用场景 需要统一处理的场景 日志 缓存 鉴权 OOP使用装饰器模式实现 装饰器模式 Decorator pattern 动态的为一个对象增加功能，但是不能改变其中结构 本质是一个“包装” 装饰器模式一般会声明一个接口，新功能继承这个接口在新的类中添加新功能 ","date":"2017-09-11","objectID":"/spring%E7%94%9F%E6%80%81%E7%B3%BB%E7%BB%9F/:2:2","tags":["学习笔记"],"title":"Spring生态系统","uri":"/spring%E7%94%9F%E6%80%81%E7%B3%BB%E7%BB%9F/"},{"categories":["学习笔记"],"content":"AOP的两种实现方式：JDK动态代理与字节码生成 1、JDK动态代理 优点：方便，不需要依赖任何第三方库 去点：只适用于接口 必须实现JDK的InvocationHandler接口，必须实现invoke方法，该方法为拦截方法。当调用代理类时候就会调用该方法 // 创建代理对象，并获取代理的对象实体的类加载器-\u003e拦截代理的接口-\u003e处理该对象的代理类 //拦截已有方法的实现，实现AOP DataService ds= (DataService)Proxy.newProxyInstance(service.getClass().getClassLoader，new Class[]{DataService.Class },new LogProxy()) 2、CGLIB/ByteBuddy字节码生成 优点：强大，不受接口限制 缺点：需要引用额外的第三方类库 不能增强final类和方法和private方法 引入CGLIB库 \u003c!-- https://mvnrepository.com/artifact/cglib/cglib --\u003e \u003cdependency\u003e \u003cgroupId\u003ecglib\u003c/groupId\u003e \u003cartifactId\u003ecglib\u003c/artifactId\u003e \u003cversion\u003e2.2.2\u003c/version\u003e \u003c/dependency\u003e 实现CGLIBD的MethodInterceptor接口，实现该拦截方法 DataServiceImpl service = new DataServiceImpl(); Enhancer enhancer =new Enhancer(); //设置实体方法DataServiceImpl为需要代理的实体类 enhancer.setSuperclass(DataServiceImpl.class) //设置触发拦截时需要调用的类（需要执行拦截方法的类） enhancer.setCallBack(new LogInterceptpor(sservice)) //新创建的类 类似于实体类的子类 DataServiceImpl enhancedService = (DataServiceImpl) enhancer.create(); ","date":"2017-09-11","objectID":"/spring%E7%94%9F%E6%80%81%E7%B3%BB%E7%BB%9F/:2:3","tags":["学习笔记"],"title":"Spring生态系统","uri":"/spring%E7%94%9F%E6%80%81%E7%B3%BB%E7%BB%9F/"},{"categories":["学习笔记"],"content":"SpringBoot中使用AOP AOP与Spring 在Spring中使用AOP实现Redis缓存 @Aspect声明切面 @Before 在方法执行前处理 After 在方法结束后进行处理 Around [SpringAOP]https://developer.ibm.com/zh/technologies/spring/articles/j-spring-boot-aop-web-log-processing-and-distributed-locking/ [Spring官方文档]https://docs.spring.io/spring/docs/4.3.15.RELEASE/spring-framework-reference/html/aop.html [中文Blog]http://blog.didispace.com/springbootaoplog/ 引入SpringBootAOP依赖 \u003cdependency\u003e \u003cgroupId\u003eorg.springframework.boot\u003c/groupId\u003e \u003cartifactId\u003espring-boot-starter-aop\u003c/artifactId\u003e \u003c/dependency\u003e 配置CGLIB切换CGLIB动态代理 spring.aop.proxy-target-class=true //传达要拦截的方法即含有Cache注解的方法 @Around(\"@annotation(SpringWeb.anno.Cache)\") //获取被拦截的方法 MethodSignature signature=(MethodSignature)joinPoint.getSignature(); //joinPoint.proceed()执行被拦截的方法 ","date":"2017-09-11","objectID":"/spring%E7%94%9F%E6%80%81%E7%B3%BB%E7%BB%9F/:2:4","tags":["学习笔记"],"title":"Spring生态系统","uri":"/spring%E7%94%9F%E6%80%81%E7%B3%BB%E7%BB%9F/"},{"categories":["学习笔记"],"content":"Redis 广泛使用的内存缓存 常见的数据结构 String/List/Set/ ZSet Redis 完全基于内存 优秀的数据结构设计 单一线程，避免上下文切换 事件驱动，非阻塞 因为redis基于内存 所以多个JVM可以基于内存共享资源 使用docker安装redis [官方文档]https://hub.docker.com/_/redis [docker关联redis]https://marcus116.blogspot.com/2019/02/how-to-run-redis-in-docker.html docker pull redis docker run -p 6379:6379 -d redis 配置Spring redis端口 spring.redis.host=localhost spring.redis.port=6379 \u003cdependency\u003e \u003cgroupId\u003eorg.springframework.boot\u003c/groupId\u003e \u003cartifactId\u003espring-boot-starter-data-redis\u003c/artifactId\u003e \u003c/dependency\u003e 将java对象传递给redis,java对象（User等）实现Serializable接口实现可序列化 创建docker mysql docker run --name mysql -e MYSQL_ROOT_PASSWORD=123456 -e MYSQL_DATABASE=mall -p 3306:3306 -d mysql:8.0.18 --lower_case_table_names=1 [Spring AOP Redis Mysql实战]https://github.com/hcsp/spring-aop-redis-mysql/pull/60 ","date":"2017-09-11","objectID":"/spring%E7%94%9F%E6%80%81%E7%B3%BB%E7%BB%9F/:2:5","tags":["学习笔记"],"title":"Spring生态系统","uri":"/spring%E7%94%9F%E6%80%81%E7%B3%BB%E7%BB%9F/"},{"categories":["学习笔记"],"content":"SpringWeb","date":"2017-09-11","objectID":"/springweb/","tags":["学习笔记"],"title":"SpringWeb","uri":"/springweb/"},{"categories":["学习笔记"],"content":"Spring Web应用 ##从零开始一个Spring应用 pom.xml [创建pom.xml]https://spring.io/guides/gs/spring-boot/ \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e \u003cproject xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"\u003e \u003cmodelVersion\u003e4.0.0\u003c/modelVersion\u003e \u003cparent\u003e \u003cgroupId\u003eorg.springframework.boot\u003c/groupId\u003e \u003cartifactId\u003espring-boot-starter-parent\u003c/artifactId\u003e \u003cversion\u003e2.3.2.RELEASE\u003c/version\u003e \u003crelativePath/\u003e \u003c!-- lookup parent from repository --\u003e \u003c/parent\u003e \u003cgroupId\u003ecom.example\u003c/groupId\u003e \u003cartifactId\u003espring-boot\u003c/artifactId\u003e \u003cversion\u003e0.0.1-SNAPSHOT\u003c/version\u003e \u003cname\u003espring-boot\u003c/name\u003e \u003cdescription\u003eDemo project for Spring Boot\u003c/description\u003e \u003cproperties\u003e \u003cjava.version\u003e1.8\u003c/java.version\u003e \u003c/properties\u003e \u003cdependencies\u003e \u003cdependency\u003e \u003cgroupId\u003eorg.springframework.boot\u003c/groupId\u003e \u003cartifactId\u003espring-boot-starter-web\u003c/artifactId\u003e \u003c/dependency\u003e \u003cdependency\u003e \u003cgroupId\u003eorg.springframework.boot\u003c/groupId\u003e \u003cartifactId\u003espring-boot-starter-test\u003c/artifactId\u003e \u003cscope\u003etest\u003c/scope\u003e \u003cexclusions\u003e \u003cexclusion\u003e \u003cgroupId\u003eorg.junit.vintage\u003c/groupId\u003e \u003cartifactId\u003ejunit-vintage-engine\u003c/artifactId\u003e \u003c/exclusion\u003e \u003c/exclusions\u003e \u003c/dependency\u003e \u003c/dependencies\u003e \u003cbuild\u003e \u003cplugins\u003e \u003cplugin\u003e \u003cgroupId\u003eorg.springframework.boot\u003c/groupId\u003e \u003cartifactId\u003espring-boot-maven-plugin\u003c/artifactId\u003e \u003c/plugin\u003e \u003c/plugins\u003e \u003c/build\u003e \u003c/project\u003e src/main/java/hello/Application.java src/main/java/hello/HelloController.java ","date":"2017-09-11","objectID":"/springweb/:0:0","tags":["学习笔记"],"title":"SpringWeb","uri":"/springweb/"},{"categories":["学习笔记"],"content":"Web应用的本质 处理HTTP请求 从HTTP请求中提取query string(查询字符串) 从HTTP请求中提取payload（负载）body中的参数 返回HTTP响应 status code HTTP response header HTTP response body JSON HTML ","date":"2017-09-11","objectID":"/springweb/:1:0","tags":["学习笔记"],"title":"SpringWeb","uri":"/springweb/"},{"categories":["学习笔记"],"content":"HTTP GET请求 Query String ?param1=value1\u0026param2=value2 通常用来传递非敏感信息 使用@RequsetParam进行接受 ","date":"2017-09-11","objectID":"/springweb/:1:1","tags":["学习笔记"],"title":"SpringWeb","uri":"/springweb/"},{"categories":["学习笔记"],"content":"RESTful API（设计API的约定） 使用HTTP动词来代表动作 GET：获取资源 POST:新建资源 PUT：更新资源 DELETE：删除资源 使用URL（名词）来代表资源 资源里没有动词 使用复数来代表资源列表 ","date":"2017-09-11","objectID":"/springweb/:1:2","tags":["学习笔记"],"title":"SpringWeb","uri":"/springweb/"},{"categories":["学习笔记"],"content":"@RestController 使用RESTful风格的参数 使用@PathVariable进行参数提取 ","date":"2017-09-11","objectID":"/springweb/:1:3","tags":["学习笔记"],"title":"SpringWeb","uri":"/springweb/"},{"categories":["学习笔记"],"content":"PostMapping 处理POST请求 从HTTP POST请求提取body ","date":"2017-09-11","objectID":"/springweb/:1:4","tags":["学习笔记"],"title":"SpringWeb","uri":"/springweb/"},{"categories":["学习笔记"],"content":"json转class文件工具 idea工具：GsonFormat ","date":"2017-09-11","objectID":"/springweb/:1:5","tags":["学习笔记"],"title":"SpringWeb","uri":"/springweb/"},{"categories":["学习笔记"],"content":"生成HTTP请求 直接生成HttpServletResponse对象 原始、简单 直接返回HTML字符串 返回对象，并自动格式化成JSON 常用 @ResponseBody 模板引擎渲染 JSP/Velocity/Freemarker ","date":"2017-09-11","objectID":"/springweb/:1:6","tags":["学习笔记"],"title":"SpringWeb","uri":"/springweb/"},{"categories":["学习笔记"],"content":"servlet-转换器 将字节流转换成java对象 将java对象转换成字节流 ","date":"2017-09-11","objectID":"/springweb/:1:7","tags":["学习笔记"],"title":"SpringWeb","uri":"/springweb/"},{"categories":["学习笔记"],"content":"周边生态系统 HTTPS 分布式部署 扩展功能 数据库 Redis缓存 信息队列 RPC(Dubbo/Spring Cloud) 微服务化 ","date":"2017-09-11","objectID":"/springweb/:1:8","tags":["学习笔记"],"title":"SpringWeb","uri":"/springweb/"},{"categories":["学习笔记"],"content":"Spring","date":"2017-09-09","objectID":"/spring/","tags":["学习笔记"],"title":"Spring","uri":"/spring/"},{"categories":["学习笔记"],"content":"Spring IoC容器原理与手写简单实现 ","date":"2017-09-09","objectID":"/spring/:0:0","tags":["学习笔记"],"title":"Spring","uri":"/spring/"},{"categories":["学习笔记"],"content":"Spring 容器的原理 ","date":"2017-09-09","objectID":"/spring/:1:0","tags":["学习笔记"],"title":"Spring","uri":"/spring/"},{"categories":["学习笔记"],"content":"Spring java世界应用的事实标准 Spring容器-一个IoC容器 自动化管理对象的容器 Spring MVC-基于Spring和Servlet的Web应用框架 Spring Boot - 集成度和自动化程度更高 ","date":"2017-09-09","objectID":"/spring/:1:1","tags":["学习笔记"],"title":"Spring","uri":"/spring/"},{"categories":["学习笔记"],"content":"Spring 容器的核心概念 Bean 容器中的最小工作单元，通常为一个Java对象 BeanFactory/ApplicationContext 容器本身对应的Java对象 依赖注入（DI）Dependence Injection 容器负责注入所有的依赖 控制反转（IoC）Inverse of Control 用户将控制权交给了容器 ","date":"2017-09-09","objectID":"/spring/:1:2","tags":["学习笔记"],"title":"Spring","uri":"/spring/"},{"categories":["学习笔记"],"content":"简单实现Spring 定义Bean 加载Bean的定义 实例化Bean 查找依赖，实现自动化注入 ","date":"2017-09-09","objectID":"/spring/:1:3","tags":["学习笔记"],"title":"Spring","uri":"/spring/"},{"categories":["学习笔记"],"content":"Spring的实现 在XML里面定义Bean BeanDefinition的载入和解析 Bean的实例化和依赖注入 对外提供服务 [简单实现ioc容器]https://github.com/hcsp/simple-ioc-container/pull/81 ","date":"2017-09-09","objectID":"/spring/:1:4","tags":["学习笔记"],"title":"Spring","uri":"/spring/"},{"categories":["学习笔记"],"content":"MyBatis","date":"2017-09-02","objectID":"/mybatis/","tags":["学习笔记"],"title":"MyBatis","uri":"/mybatis/"},{"categories":["学习笔记"],"content":"MyBatis - ORM框架 ","date":"2017-09-02","objectID":"/mybatis/:0:0","tags":["学习笔记"],"title":"MyBatis","uri":"/mybatis/"},{"categories":["学习笔记"],"content":"ORM(Object Relationship Mapping) 对象关系映射 自动完成对象到数据库的映射 Association 自动装配对象 ","date":"2017-09-02","objectID":"/mybatis/:1:0","tags":["学习笔记"],"title":"MyBatis","uri":"/mybatis/"},{"categories":["学习笔记"],"content":"MyBatis [MyBatis入门] https://mybatis.org/mybatis-3/zh/getting-started.html 1、引入Maven依赖 \u003cdependency\u003e \u003cgroupId\u003eorg.mybatis\u003c/groupId\u003e \u003cartifactId\u003emybatis\u003c/artifactId\u003e \u003cversion\u003e3.5.5\u003c/version\u003e \u003c/dependency\u003e 2、创建MyBatis文件夹及其配置文件 文件路径：main/resources/db/mybatis/config.xml \u003c?xml version=\"1.0\" encoding=\"UTF-8\" ?\u003e \u003c!DOCTYPE configuration PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-config.dtd\"\u003e \u003cconfiguration\u003e \u003cenvironments default=\"development\"\u003e \u003cenvironment id=\"development\"\u003e \u003c!-- dataSource链接池--\u003e \u003ctransactionManager type=\"JDBC\"/\u003e \u003cdataSource type=\"POOLED\"\u003e \u003c!--driver 设置数据库驱动 --\u003e \u003cproperty name=\"driver\" value=\"${driver}\"/\u003e \u003c!-- 连接串 --\u003e \u003cproperty name=\"url\" value=\"${url}\"/\u003e \u003cproperty name=\"username\" value=\"${username}\"/\u003e \u003cproperty name=\"password\" value=\"${password}\"/\u003e \u003c/dataSource\u003e \u003c/environment\u003e \u003c/environments\u003e \u003cmappers\u003e \u003cmapper resource=\"org/mybatis/example/BlogMapper.xml\"/\u003e \u003c/mappers\u003e \u003c/configuration\u003e 3、创建SqlSessionFactory对象 String resource = \"db/mybatis/config.xml\"; InputStream inputStream = Resources.getResourceAsStream(resource); SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream); 4、通过接口和注解调用Mybatis进行数据库操作 \u003c!-- 在配置文件中 进行配置后使用注解 class中填入接口全限定类名 或者别名 --\u003e \u003cmapper class=\"my.package.com.MyClass\"\u003e\u003c/mapper\u003e interface UserMapper{ @Select(\"select * from user\") List\u003cUser\u003e getUsers(); } String resource = \"db/mybatis/config.xml\"; InputStream inputStream = Resources.getResourceAsStream(resource); SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream); try(SqlSession session = sqlSessionFactory.openSession()){ UserMapper mapper = session.getMapper(UserMapper.Class) } 原理： 使用代理模式通过反射和注解创建了一个UserMapper实现 ","date":"2017-09-02","objectID":"/mybatis/:2:0","tags":["学习笔记"],"title":"MyBatis","uri":"/mybatis/"},{"categories":["学习笔记"],"content":"配置日志 [配置MyBatis日志]https://mybatis.org/mybatis-3/zh/logging.html \u003csettings\u003e \u003csetting name=\"logImpl\" value=\"LOG4J\"/\u003e \u003c/settings\u003e 配置日志Maven依赖 \u003cdependency\u003e \u003cgroupId\u003elog4j\u003c/groupId\u003e \u003cartifactId\u003elog4j\u003c/artifactId\u003e \u003cversion\u003e1.2.17\u003c/version\u003e \u003c/dependency\u003e 创建log4j.properties文件 # 全局日志配置 rootlogger日志等级 DEBUG log4j.rootLogger=ERROR, stdout # MyBatis 日志配置 log4j.logger.org.mybatis.example.BlogMapper=TRACE # 控制台输出 log4j.appender.stdout=org.apache.log4j.ConsoleAppender log4j.appender.stdout.layout=org.apache.log4j.PatternLayout log4j.appender.stdout.layout.ConversionPattern=%5p [%t] - %m%n 首先配置日志框架，提高问题排查效率 配置数据源 Mapper:接口由MyBatis动态代理(注解方式) 优点：方便 缺点：SQL复杂的时候不方便 Mapper:用xml编写复杂的SQL 优点：可以方便使用MyBatis的强大功能 缺点：SQL和代码分离 创建Mapper.xml文件 \u003c?xml version=\"1.0\" encoding=\"UTF-8\" ?\u003e \u003c!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"\u003e \u003cmapper namespace=\"org.mybatis.example.BlogMapper\"\u003e \u003cselect id=\"selectBlog\" resultType=\"Blog\"\u003e select * from Blog where id = #{id} \u003c/select\u003e \u003c/mapper\u003e 调用Mapper.xml中的sql语句 String resource = \"db/mybatis/config.xml\"; InputStream inputStream = Resources.getResourceAsStream(resource); SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream); try(SqlSession session = sqlSessionFactory.openSession()){ UserMapper mapper = session.slectList(配置文件路径和sql语句名字) } MyBatis参数 parameterType 参数的#{}和${} _#{}以sql方式替换参数 防止sql注入 ${}直接替换对应的参数 参数是按照JavaBean约定读取的 resultType typeAlias $区分内部类的分割符 设置别名（类似类的引用） 写参照是按照JavaBean约定的 – #{id}查找传入对象对应为id的属性（该对象遵循JavaBean约定）可以用Map取代临时的对象 \u003c?xml version=\"1.0\" encoding=\"UTF-8\" ?\u003e \u003c!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"\u003e \u003cmapper namespace=\"org.mybatis.example.BlogMapper\"\u003e \u003cselect id=\"selectBlog\" resultType=\"Blog\"\u003e select * from Blog where id = #{id} \u003c/select\u003e \u003c/mapper\u003e Association Map与key = 属性，value=值 ","date":"2017-09-02","objectID":"/mybatis/:3:0","tags":["学习笔记"],"title":"MyBatis","uri":"/mybatis/"},{"categories":["学习笔记"],"content":"MyBatis动态SQL 通过传入的参数动态决定执行的sql语句 \u003cselect id=\"findActiveBlogWithTitleLike\" resultType=\"Blog\"\u003e SELECT * FROM BLOG WHERE state = ‘ACTIVE’ \u003cif test=\"title != null\"\u003e AND title like #{title} \u003c/if\u003e \u003c/select\u003e foreach语句 \u003cselect id=\"selectPostIn\" resultType=\"domain.blog.Post\"\u003e SELECT * FROM POST P WHERE ID in \u003cforeach item=\"item\" index=\"index\" collection=\"list\" open=\"(\" separator=\",\" close=\")\"\u003e #{item} \u003c/foreach\u003e \u003c/select\u003e ","date":"2017-09-02","objectID":"/mybatis/:4:0","tags":["学习笔记"],"title":"MyBatis","uri":"/mybatis/"},{"categories":["学习笔记"],"content":"注解","date":"2017-08-31","objectID":"/%E6%B3%A8%E8%A7%A3/","tags":["学习笔记"],"title":"注解","uri":"/%E6%B3%A8%E8%A7%A3/"},{"categories":["学习笔记"],"content":"注解 ","date":"2017-08-31","objectID":"/%E6%B3%A8%E8%A7%A3/:0:0","tags":["学习笔记"],"title":"注解","uri":"/%E6%B3%A8%E8%A7%A3/"},{"categories":["学习笔记"],"content":"什么是注解 Class Class是Java类的说明书 通过反射或阅读说明书创建类的实例 Annotation注解就是说明书(Class文件上携带信息)的一段信息/文本/标记 可以携带参数 可以在运行时被阅读 ","date":"2017-08-31","objectID":"/%E6%B3%A8%E8%A7%A3/:1:0","tags":["学习笔记"],"title":"注解","uri":"/%E6%B3%A8%E8%A7%A3/"},{"categories":["学习笔记"],"content":"注解的写法 新建一个类的时候选择注解 元注解(可以在放在注解上面的注解) @Retention 当前注解编译后保留等级（选项） @Target 限制当前注解在什么位置可以使用(类/方法/属性) @Documented @Inherited @Repeatable ","date":"2017-08-31","objectID":"/%E6%B3%A8%E8%A7%A3/:2:0","tags":["学习笔记"],"title":"注解","uri":"/%E6%B3%A8%E8%A7%A3/"},{"categories":["学习笔记"],"content":"注解属性 基本数据类型+String+类及其他们的数组 默认值 名为value的属性 ","date":"2017-08-31","objectID":"/%E6%B3%A8%E8%A7%A3/:3:0","tags":["学习笔记"],"title":"注解","uri":"/%E6%B3%A8%E8%A7%A3/"},{"categories":["学习笔记"],"content":"JDK的自带注解 @Deprecated //废弃的方法 @Override //子类覆盖父类方法 @SuppressWarning //忽略检查 @FunctionalInterface //函数式标记接口 ","date":"2017-08-31","objectID":"/%E6%B3%A8%E8%A7%A3/:4:0","tags":["学习笔记"],"title":"注解","uri":"/%E6%B3%A8%E8%A7%A3/"},{"categories":["学习笔记"],"content":"ByteBuddy \u003cdependency\u003e \u003cgroupId\u003enet.bytebuddy\u003c/groupId\u003e \u003cartifactId\u003ebyte-buddy\u003c/artifactId\u003e \u003cversion\u003e1.10.1\u003c/version\u003e \u003cscope\u003ecompile\u003c/scope\u003e \u003c/dependency\u003e ","date":"2017-08-31","objectID":"/%E6%B3%A8%E8%A7%A3/:5:0","tags":["学习笔记"],"title":"注解","uri":"/%E6%B3%A8%E8%A7%A3/"},{"categories":["学习笔记"],"content":"基于注解的缓存装饰器 基于注解的缓存装饰器 ","date":"2017-08-31","objectID":"/%E6%B3%A8%E8%A7%A3/:6:0","tags":["学习笔记"],"title":"注解","uri":"/%E6%B3%A8%E8%A7%A3/"},{"categories":["预览"],"content":"这是一篇用于预览 Markdown 基本语法的文章。","date":"2017-08-25","objectID":"/basic-markdown-preview/","tags":["Hugo","主题"],"title":"Markdown 基本语法预览","uri":"/basic-markdown-preview/"},{"categories":["预览"],"content":"这是一篇用于预览  Markdown 基本语法的文章。 文章内容基于 GitHub Flavo红色 Markdown Spec。 不包含复杂的规则说明，仅仅展示 GFM 所约定的 Markdown 基本语法。 ","date":"2017-08-25","objectID":"/basic-markdown-preview/:0:0","tags":["Hugo","主题"],"title":"Markdown 基本语法预览","uri":"/basic-markdown-preview/"},{"categories":["预览"],"content":"1 引言  Markdown 是一种用于编写结构化文档的纯文本格式。它基于电子邮件和论坛文章的格式所约定。 它由 John Gruber (在 Aaron Swartz 的帮助下)开发，于 2004 年以语法描述和用于将 Markdown 转换为 HTML 的 Perl 脚本(Markdown.pl)的形式发布。 在接下来的十年中，许多实现被开发出来。一些用脚注、表和其他文档元素的约定扩展了原始 Markdown 语法。 有些允许 Markdown 文档以 HTML 以外的格式呈现。 像 红色dit，StackOverflow 和 GitHub 这样的网站有上百万的用户在使用 Markdown。 Markdown 开始被应用于网络以外的领域，包括作者书籍、文章、幻灯片、信件和课堂笔记。 ","date":"2017-08-25","objectID":"/basic-markdown-preview/:1:0","tags":["Hugo","主题"],"title":"Markdown 基本语法预览","uri":"/basic-markdown-preview/"},{"categories":["预览"],"content":"2 块和内联元素 我们可以把一个文档看成一系列的块，如段落、引用、列表、标题和代码块。 有些块(如引号和列表)可以包含其它的块\u0008，即 容器块； 其他的块(如标题和段落)则包含内联元素(如文本、链接、强调、图像、内联代码等)，即 叶子块。 块的符号总是优先于内联元素的符号。例如： - `one - two` `one two` ","date":"2017-08-25","objectID":"/basic-markdown-preview/:2:0","tags":["Hugo","主题"],"title":"Markdown 基本语法预览","uri":"/basic-markdown-preview/"},{"categories":["预览"],"content":"3 叶子块 本节描述用于组成 Markdown 文档的不同类型的叶子块。 ","date":"2017-08-25","objectID":"/basic-markdown-preview/:3:0","tags":["Hugo","主题"],"title":"Markdown 基本语法预览","uri":"/basic-markdown-preview/"},{"categories":["预览"],"content":"3.1 换行符 *** ------ ____ ","date":"2017-08-25","objectID":"/basic-markdown-preview/:3:1","tags":["Hugo","主题"],"title":"Markdown 基本语法预览","uri":"/basic-markdown-preview/"},{"categories":["预览"],"content":"3.2 标题 关于 ATX 风格标题和 Setext 风格标题 本文只展示 ATX 风格标题，关于 Setext 风格标题的介绍请参考 GFM Setext headings 说明。 笔者不推荐在 Hugo 的 Markdown 文档中使用 Setext 风格标题。 ## H2 二级标题 ### H3 三级标题 #### H4 四级标题 ##### H5 五级标题 ###### H6 六级标题 ","date":"2017-08-25","objectID":"/basic-markdown-preview/:3:2","tags":["Hugo","主题"],"title":"Markdown 基本语法预览","uri":"/basic-markdown-preview/"},{"categories":["预览"],"content":"H2 二级标题 ","date":"2017-08-25","objectID":"/basic-markdown-preview/:4:0","tags":["Hugo","主题"],"title":"Markdown 基本语法预览","uri":"/basic-markdown-preview/"},{"categories":["预览"],"content":"H3 三级标题 H4 四级标题 H5 五级标题 H6 六级标题 ","date":"2017-08-25","objectID":"/basic-markdown-preview/:4:1","tags":["Hugo","主题"],"title":"Markdown 基本语法预览","uri":"/basic-markdown-preview/"},{"categories":["预览"],"content":"3.3 代码块 关于缩进式代码块和围栏式代码块 本文只展示围栏式代码块，关于缩进式代码块的介绍请参考 GFM Indented code blocks 说明。 笔者不推荐在 Hugo 的 Markdown 文档中使用缩进式代码块。 ``` foo() ``` ~~~ foo() ~~~ ```` foo() ```` ```ruby def foo(x) return 3 end ``` foo() foo() foo() def foo(x) return 3 end package main import \"fmt\" func main() { fmt.Println(\"Hello, 世界\") } ","date":"2017-08-25","objectID":"/basic-markdown-preview/:4:2","tags":["Hugo","主题"],"title":"Markdown 基本语法预览","uri":"/basic-markdown-preview/"},{"categories":["预览"],"content":"3.4 段落 这是一个段落。 这还是之前段落的一部分。 这是新的段落。 这是一个段落。 这还是之前段落的一部分。 这是新的段落。 ","date":"2017-08-25","objectID":"/basic-markdown-preview/:4:3","tags":["Hugo","主题"],"title":"Markdown 基本语法预览","uri":"/basic-markdown-preview/"},{"categories":["预览"],"content":"3.5 引用链接的定义 [foo]: /url \"title\" [foo] [bar]: /url [bar] foo bar ","date":"2017-08-25","objectID":"/basic-markdown-preview/:4:4","tags":["Hugo","主题"],"title":"Markdown 基本语法预览","uri":"/basic-markdown-preview/"},{"categories":["预览"],"content":"3.6 空白行 块之间的空白行将被忽略，除了它们在确定列表是紧还是松时所起的作用。 文档开头和结尾的空行也会被忽略。 ","date":"2017-08-25","objectID":"/basic-markdown-preview/:4:5","tags":["Hugo","主题"],"title":"Markdown 基本语法预览","uri":"/basic-markdown-preview/"},{"categories":["预览"],"content":"4 容器块 ","date":"2017-08-25","objectID":"/basic-markdown-preview/:5:0","tags":["Hugo","主题"],"title":"Markdown 基本语法预览","uri":"/basic-markdown-preview/"},{"categories":["预览"],"content":"4.1 引用 \u003e Foo \u003e \u003e - **bar** \u003e - baz Foo bar baz ","date":"2017-08-25","objectID":"/basic-markdown-preview/:5:1","tags":["Hugo","主题"],"title":"Markdown 基本语法预览","uri":"/basic-markdown-preview/"},{"categories":["预览"],"content":"4.2 无序列表 - 项目 1 * 项目 A - 项目 B 一些说明 + 项目 a * 项目 b - 项目 c + 项目 C + 项目 2 * 项目 3 项目 1 项目 A 项目 B 一些说明 项目 a 项目 b 项目 c 项目 C 项目 2 项目 3 ","date":"2017-08-25","objectID":"/basic-markdown-preview/:5:2","tags":["Hugo","主题"],"title":"Markdown 基本语法预览","uri":"/basic-markdown-preview/"},{"categories":["预览"],"content":"4.3 有序列表 1. 项目 1 1. 项目 A 2. 项目 B 一些说明 1. 项目 a 2. 项目 b 3. 项目 c 3. 项目 C 2. 项目 2 3. 项目 3 项目 1 项目 A 项目 B 一些说明 项目 a 项目 b 项目 c 项目 C 项目 2 项目 3 ","date":"2017-08-25","objectID":"/basic-markdown-preview/:5:3","tags":["Hugo","主题"],"title":"Markdown 基本语法预览","uri":"/basic-markdown-preview/"},{"categories":["预览"],"content":"4.4 任务列表 - [ ] 任务 1 * [X] 任务 A - 任务 B + [ ] 任务 a * [ ] 任务 b - [X] 任务 c + [X] 任务 C + [ ] 任务 2 * [X] 任务 3 任务 1 任务 A 任务 B 任务 a 任务 b 任务 c 任务 C 任务 2 任务 3 ","date":"2017-08-25","objectID":"/basic-markdown-preview/:5:4","tags":["Hugo","主题"],"title":"Markdown 基本语法预览","uri":"/basic-markdown-preview/"},{"categories":["预览"],"content":"4.5 表格 | _颜色_ | 水果 | 蔬菜 | | ---------- |:---------------:| -----------:| | 红色 | *苹果* | 辣椒 | | ~~橙色~~ | 橘子 | **胡萝卜** | | 绿色 | ~~***梨子***~~ | 菠菜 | 颜色 水果 蔬菜 红色 苹果 辣椒 橙色 橘子 胡萝卜 绿色 梨子 菠菜 ","date":"2017-08-25","objectID":"/basic-markdown-preview/:5:5","tags":["Hugo","主题"],"title":"Markdown 基本语法预览","uri":"/basic-markdown-preview/"},{"categories":["预览"],"content":"3. 页内锚 [脚注](#footnote) ## 4. 脚注 {#footnote} 脚注 ","date":"2017-08-25","objectID":"/basic-markdown-preview/:6:0","tags":["Hugo","主题"],"title":"Markdown 基本语法预览","uri":"/basic-markdown-preview/"},{"categories":["预览"],"content":"4. 脚注 这是一个基本的数字脚注[^1] 带有 \"label\" 标签的脚注[^label] 下定义的脚注[^!DEF] 带有链接的脚注[^pa] [^1]: 这是一个基本的数字脚注 [^label]: 带有 \"label\" 标签的脚注 [^pa]: [LoveIt 主题](https://github.com/dillonzq/LoveIt) [^!DEF]: 下定义的脚注 这是一个基本的数字脚注1 带有 “label” 标签的脚注2 下定义的脚注3 带有链接的脚注4 ","date":"2017-08-25","objectID":"/basic-markdown-preview/:7:0","tags":["Hugo","主题"],"title":"Markdown 基本语法预览","uri":"/basic-markdown-preview/"},{"categories":["预览"],"content":"5. 内联格式 `内联代码块` \u003ckbd\u003ectrl\u003c/kbd\u003e+\u003ckbd\u003ealt\u003c/kbd\u003e+\u003ckbd\u003edel\u003c/kbd\u003e **加粗 1** 和 __加粗 2__ *倾斜 1* 和 _倾斜 2_ ~~删除线~~ ***加粗 1 和 倾斜 1*** ___加粗 2 和 倾斜 2___ __*加粗 2 和 倾斜 1*__ **_加粗 1 和 倾斜 2_** ~~*删除线 倾斜 1*~~ 和 *~~删除线 倾斜 2~~* ~~_删除线 倾斜 2_~~ 和 _~~删除线 倾斜 2~~_ ~~**删除线 加粗 1**~~ 和 **~~删除线 加粗 1~~** ~~__删除线 加粗 2__~~ 和 __~~删除线 加粗 2~~__ ~~***删除线 倾斜 1 加粗 1***~~ 和 ***~~删除线 倾斜 1 加粗 1~~*** ~~___删除线 倾斜 2 加粗 2___~~ 和 ___~~删除线 倾斜 2 加粗 2~~___ **~~*删除线 倾斜 1 加粗 1*~~** 和 *~~**删除线 倾斜 1 加粗 1**~~* __~~_删除线 倾斜 2 加粗 2_~~__ 和 _~~__删除线 倾斜 2 加粗 2__~~_ **~~_删除线 倾斜 2 加粗 1_~~** 和 _~~**删除线 倾斜 2 加粗 1**~~_ __~~*删除线 倾斜 1 加粗 2*~~__ 和 *~~__删除线 倾斜 1 加粗 2__~~* 内联代码块 ctrl+alt+del 加粗 1 和 加粗 2 倾斜 1 和 倾斜 2 删除线 加粗 1 和 倾斜 1 加粗 2 和 倾斜 2 加粗 2 和 倾斜 1 加粗 1 和 倾斜 2 删除线 倾斜 1 和 删除线 倾斜 2 删除线 倾斜 2 和 删除线 倾斜 2 删除线 加粗 1 和 删除线 加粗 1 删除线 加粗 2 和 删除线 加粗 2 删除线 倾斜 1 加粗 1 和 删除线 倾斜 1 加粗 1 删除线 倾斜 2 加粗 2 和 删除线 倾斜 2 加粗 2 删除线 倾斜 1 加粗 1 和 删除线 倾斜 1 加粗 1 删除线 倾斜 2 加粗 2 和 删除线 倾斜 2 加粗 2 删除线 倾斜 2 加粗 1 和 删除线 倾斜 2 加粗 1 删除线 倾斜 1 加粗 2 和 删除线 倾斜 1 加粗 2 ","date":"2017-08-25","objectID":"/basic-markdown-preview/:8:0","tags":["Hugo","主题"],"title":"Markdown 基本语法预览","uri":"/basic-markdown-preview/"},{"categories":["预览"],"content":"6. 图片 Web image ![Web Picture](https://static.dillonzq.com/images/20190817130904-U6cPUk.jpg \"Web Picture\") Local image ![Local Picture](logo-revolunet-carre.jpg \"Local Picture\") contact@revolunet.com @revolunet Issue #1 https://github.com/revolunet/sublimetext-markdown-preview/ This is a link https://github.com/revolunet/sublimetext-markdown-preview/. This is a link \"https://github.com/revolunet/sublimetext-markdown-preview/\". With this link (https://github.com/revolunet/sublimetext-markdown-preview/), it still works. Web image Web PictureWeb Picture \" Web Picture Local image Local PictureLocal Picture \" Local Picture https://www.google.com contact@revolunet.com @revolunet Issue #1 https://github.com/revolunet/sublimetext-markdown-preview/ This is a link https://github.com/revolunet/sublimetext-markdown-preview/. This is a link “https://github.com/revolunet/sublimetext-markdown-preview/\". With this link (https://github.com/revolunet/sublimetext-markdown-preview/), it still works. ","date":"2017-08-25","objectID":"/basic-markdown-preview/:9:0","tags":["Hugo","主题"],"title":"Markdown 基本语法预览","uri":"/basic-markdown-preview/"},{"categories":["预览"],"content":"Abbreviation Abbreviations source are found in a separate markdown file specified in frontmatter. The HTML specification is maintained by the W3C. *[HTML]: Hyper Text Markup Language *[W3C]: World Wide Web Consortium The HTML specification is maintained by the W3C. ","date":"2017-08-25","objectID":"/basic-markdown-preview/:10:0","tags":["Hugo","主题"],"title":"Markdown 基本语法预览","uri":"/basic-markdown-preview/"},{"categories":["预览"],"content":"Unorde红色 List Unorde红色 List - item 1 * item A * item B more text + item a + item b + item c * item C - item 2 - item 3 Unorde红色 List item 1 item A item B more text item a item b item c item C item 2 item 3 ","date":"2017-08-25","objectID":"/basic-markdown-preview/:11:0","tags":["Hugo","主题"],"title":"Markdown 基本语法预览","uri":"/basic-markdown-preview/"},{"categories":["预览"],"content":"Orde红色 List Orde红色 List 1. item 1 1. item A 2. item B more text 1. item a 2. item b 3. item c 3. item C 2. item 2 3. item 3 Orde红色 List item 1 item A item B more text item a item b item c item C item 2 item 3 ","date":"2017-08-25","objectID":"/basic-markdown-preview/:12:0","tags":["Hugo","主题"],"title":"Markdown 基本语法预览","uri":"/basic-markdown-preview/"},{"categories":["预览"],"content":"Mixed Lists Really Mixed Lists should break with sane_lists on. Mixed Lists - item 1 * [X] item A * [ ] item B more text 1. item a 2. itemb 3. item c * [X] item C - item 2 - item 3 Really Mixed Lists - item 1 * [X] item A - item B more text 1. item a + itemb + [ ] item c 3. item C 2. item 2 - [X] item 3 Mixed Lists item 1 item A item B more text item a itemb item c item C item 2 item 3 Really Mixed Lists item 1 item A item B more text item a itemb item c item C item 2 item 3 ","date":"2017-08-25","objectID":"/basic-markdown-preview/:13:0","tags":["Hugo","主题"],"title":"Markdown 基本语法预览","uri":"/basic-markdown-preview/"},{"categories":["预览"],"content":"Blocks This is a block. This is more of a block. This is a block. This is more of a block. ","date":"2017-08-25","objectID":"/basic-markdown-preview/:14:0","tags":["Hugo","主题"],"title":"Markdown 基本语法预览","uri":"/basic-markdown-preview/"},{"categories":["预览"],"content":"Block Quotes \u003e This is a block quote \u003e\u003e How does it look? This is a block quote. How does it look? I think it looks good. ","date":"2017-08-25","objectID":"/basic-markdown-preview/:15:0","tags":["Hugo","主题"],"title":"Markdown 基本语法预览","uri":"/basic-markdown-preview/"},{"categories":["预览"],"content":"Fenced Block Assuming guessing is not enabled. ``` // Fenced **without** highlighting function doIt() { for (var i = 1; i \u003c= slen ; i^^) { setTimeout(\"document.z.textdisplay.value = newMake()\", i*300); setTimeout(\"window.status = newMake()\", i*300); } } ``` ```javascript // Fenced **with** highlighting function doIt() { for (var i = 1; i \u003c= slen ; i^^) { setTimeout(\"document.z.textdisplay.value = newMake()\", i*300); setTimeout(\"window.status = newMake()\", i*300); } } ``` // Fenced **without** highlighting function doIt() { for (var i = 1; i \u003c= slen ; i^^) { setTimeout(\"document.z.textdisplay.value = newMake()\", i*300); setTimeout(\"window.status = newMake()\", i*300); } } // Fenced **with** highlighting function doIt() { for (var i = 1; i \u003c= slen ; i^^) { setTimeout(\"document.z.textdisplay.value = newMake()\", i*300); setTimeout(\"window.status = newMake()\", i*300); } } ","date":"2017-08-25","objectID":"/basic-markdown-preview/:16:0","tags":["Hugo","主题"],"title":"Markdown 基本语法预览","uri":"/basic-markdown-preview/"},{"categories":["预览"],"content":"Tables | _颜色_ | 水果 | 蔬菜 | | ------------- |:---------------:| -----------------:| | 红色 | *苹果* | [辣椒](#Tables) | | ~~橙色~~ | 橘子 | **胡萝卜** | | 绿色 | ~~***梨子***~~ | 菠菜 | 颜色 水果 蔬菜 红色 苹果 辣椒 橙色 橘子 胡萝卜 绿色 梨子 菠菜 Class or Enum Year Month Day Hours Minutes Seconds* Zone Offset Zone ID toString Output Where Discussed Instant 2013-08-20T15:16:26.355Z Instant Class LocalDate 2013-08-20 Date Classes LocalDateTime 2013-08-20T08:16:26.937 Date and Time Classes ZonedDateTime 2013-08-21T00:16:26.941+09:00[Asia/Tokyo] Time Zone and Offset Classes LocalTime 08:16:26.943 Date and Time Classes MonthDay --08-20 Date Classes Year 2013 Date Classes YearMonth 2013-08 Date Classes Month AUGUST DayOfWeek and Month Enums OffsetDateTime 2013-08-20T08:16:26.954-07:00 Time Zone and Offset Classes OffsetTime 08:16:26.957-07:00 Time Zone and Offset Classes Duration ** ** ** PT20H (20 hours) Period and Duration Period *** *** P10D (10 days) Period and Duration ","date":"2017-08-25","objectID":"/basic-markdown-preview/:17:0","tags":["Hugo","主题"],"title":"Markdown 基本语法预览","uri":"/basic-markdown-preview/"},{"categories":["预览"],"content":"Smart Strong Text with double__underscore__words. __Strong__ still works. __this__works__too__ Text with double__underscore__words. Strong still works. this__works__too ","date":"2017-08-25","objectID":"/basic-markdown-preview/:18:0","tags":["Hugo","主题"],"title":"Markdown 基本语法预览","uri":"/basic-markdown-preview/"},{"categories":["预览"],"content":"Smarty \"double quotes\" 'single quotes' da--sh elipsis... “double quotes” ‘single quotes’ da–sh elipsis… ","date":"2017-08-25","objectID":"/basic-markdown-preview/:19:0","tags":["Hugo","主题"],"title":"Markdown 基本语法预览","uri":"/basic-markdown-preview/"},{"categories":["预览"],"content":"Neseted Fences ``` This will still be parsed as a normal indented code block. ``` ``` This will still be parsed as a fenced code block. ``` - This is a list that contains multiple code blocks. - Here is an indented block ``` This will still be parsed as a normal indented code block. ``` - Here is a fenced code block: ``` This will still be parsed as a fenced code block. ``` \u003e ``` \u003e Blockquotes? \u003e Not a problem! \u003e ``` ``` This will still be parsed as a normal indented code block. ``` This will still be parsed as a fenced code block. This is a list that contains multiple code blocks. Here is an indented block ``` This will still be parsed as a normal indented code block. ``` Here is a fenced code block: This will still be parsed as a fenced code block. Blockquotes? Not a problem! Others ","date":"2017-08-25","objectID":"/basic-markdown-preview/:20:0","tags":["Hugo","主题"],"title":"Markdown 基本语法预览","uri":"/basic-markdown-preview/"},{"categories":["预览"],"content":"Github Emoji This is a test for emoji :smile:. The emojis are images linked to github assets :octocat:. This is a test for emoji :smile:. The emojis are images linked to github assets :octocat:. ","date":"2017-08-25","objectID":"/basic-markdown-preview/:21:0","tags":["Hugo","主题"],"title":"Markdown 基本语法预览","uri":"/basic-markdown-preview/"},{"categories":["预览"],"content":"People :+1::-1::alien::angel::anger::angry::anguished::astonished::baby::blue_heart::blush::boom::bow::bowtie::boy::bride_with_veil::broken_heart::bust_in_silhouette::busts_in_silhouette::clap::cold_sweat::collision::confounded::confused::construction_worker::cop::couple::couple_with_heart::couplekiss::cry::crying_cat_face::cupid::dancer::dancers::dash::disappointed::disappointed_relieved::dizzy::dizzy_face::droplet::ear::exclamation::expressionless::eyes::facepunch::family::fearful::feelsgood::feet::finnadie::fire::fist::flushed::frowning::fu::girl::goberserk::godmode::绿色_heart::grey_exclamation::grey_question::grimacing::grin::grinning::guardsman::haircut::hand::hankey::hear_no_evil::heart::heart_eyes::heart_eyes_cat::heartbeat::heartpulse::hurtrealbad::hushed::imp::information_desk_person::innocent::japanese_goblin::japanese_ogre::joy::joy_cat::kiss::kissing::kissing_cat::kissing_closed_eyes::kissing_heart::kissing_smiling_eyes::laughing::lips::love_letter::man::man_with_gua_pi_mao::man_with_turban::mask::massage::metal::muscle::musical_note::nail_care::neckbeard::neutral_face::no_good::no_mouth::nose::notes::ok_hand::ok_woman::older_man::older_woman::open_hands::open_mouth::pensive::persevere::person_frowning::person_with_blond_hair::person_with_pouting_face::point_down::point_left::point_right::point_up::point_up_2::poop::pouting_cat::pray::princess::punch::purple_heart::question::rage::rage1::rage2::rage3::rage4::raised_hand::raised_hands::raising_hand::relaxed::relieved::revolving_hearts::runner::running::satisfied::scream::scream_cat::see_no_evil::shit::skull::sleeping::sleepy::smile::smile_cat::smiley::smiley_cat::smiling_imp::smirk::smirk_cat::sob::sparkles::sparkling_heart::speak_no_evil::speech_balloon::star::star2::stuck_out_tongue::stuck_out_tongue_closed_eyes::stuck_out_tongue_winking_eye::sunglasses::suspect::sweat::sweat_drops::sweat_smile::thought_balloon::thumbsdown::thumbsup::ti红色_face::tongue::triumph::trollface::two_hearts::two_men_holding_hands::two_women_holding_hands::unamused::v::walking::wave::weary::wink::woman::worried::yellow_heart::yum::zzz: ","date":"2017-08-25","objectID":"/basic-markdown-preview/:21:1","tags":["Hugo","主题"],"title":"Markdown 基本语法预览","uri":"/basic-markdown-preview/"},{"categories":["预览"],"content":"Nature :ant::baby_chick::bear::bee::beetle::bird::blossom::blowfish::boar::bouquet::bug::cactus::camel::cat::cat2::cherry_blossom::chestnut::chicken::cloud::cow::cow2::crescent_moon::crocodile::cyclone::deciduous_tree::dog::dog2::dolphin::dragon::dragon_face::dromedary_camel::ear_of_rice::earth_africa::earth_americas::earth_asia::elephant::ever绿色_tree::fallen_leaf::first_quarter_moon::first_quarter_moon_with_face::fish::foggy::four_leaf_clover::frog::full_moon::full_moon_with_face::globe_with_meridians::goat::hamster::hatched_chick::hatching_chick::herb::hibiscus::honeybee::horse::koala::last_quarter_moon::last_quarter_moon_with_face::leaves::leopard::maple_leaf::milky_way::monkey::monkey_face::moon::mouse::mouse2::mushroom::new_moon::new_moon_with_face::night_with_stars::ocean::octocat::octopus::ox::palm_tree::panda_face::partly_sunny::paw_prints::penguin::pig::pig2::pig_nose::poodle::rabbit::rabbit2::racehorse::ram::rat::rooster::rose::seedling::sheep::shell::snail::snake::snowflake::snowman::squirrel::sun_with_face::sunflower::sunny::tiger::tiger2::tropical_fish::tulip::turtle::umbrella::volcano::waning_crescent_moon::waning_gibbous_moon::water_buffalo::waxing_crescent_moon::waxing_gibbous_moon::whale::whale2::wolf::zap: ","date":"2017-08-25","objectID":"/basic-markdown-preview/:21:2","tags":["Hugo","主题"],"title":"Markdown 基本语法预览","uri":"/basic-markdown-preview/"},{"categories":["预览"],"content":"Objects :8ball::alarm_clock::苹果::art::athletic_shoe::baby_bottle::balloon::bamboo::banana::bar_chart::baseball::basketball::bath::bathtub::battery::beer::beers::bell::bento::bicyclist::bikini::birthday::black_joker::black_nib::blue_book::bomb::book::bookmark::bookmark_tabs::books::boot::bowling::bread::briefcase::bulb::cake::calendar::calling::camera::candy::card_index::cd::chart_with_downwards_trend::chart_with_upwards_trend::cherries::chocolate_bar::christmas_tree::clapper::clipboard::closed_book::closed_lock_with_key::closed_umbrella::clubs::cocktail::coffee::computer::confetti_ball::cookie::corn::c红色it_card::crown::crystal_ball::curry::custard::dango::dart::date::diamonds::dollar::dolls::door::doughnut::dress::dvd::e-mail::egg::eggplant::electric_plug::email::envelope::envelope_with_arrow::euro::eyeglasses::fax::file_folder::fireworks::fish_cake::fishing_pole_and_fish::flags::flashlight::flipper::floppy_disk::flower_playing_cards::football::footprints::fork_and_knife::fried_shrimp::fries::game_die::gem::ghost::gift::gift_heart::golf::grapes::绿色_苹果::绿色_book::guitar::gun::hamburger::hammer::handbag::headphones::hearts::high_brightness::high_heel::hocho::honey_pot::horse_racing::hourglass::hourglass_flowing_sand::ice_cream::icecream::inbox_tray::incoming_envelope::iphone::jack_o_lantern::jeans::key::kimono::lantern::ledger::lemon::lipstick::lock::lock_with_ink_pen::lollipop::loop::loud_sound::loudspeaker::low_brightness::mag::mag_right::mahjong::mailbox::mailbox_closed::mailbox_with_mail::mailbox_with_no_mail::mans_shoe::meat_on_bone::mega::melon::memo::microphone::microscope::minidisc::money_with_wings::moneybag::mortar_board::mountain_bicyclist::movie_camera::musical_keyboard::musical_score::mute::name_badge::necktie::newspaper::no_bell::notebook::notebook_with_decorative_cover::nut_and_bolt::oden::open_book::open_file_folder::橙色_book::outbox_tray::package::page_facing_up::page_with_curl::pager::paperclip::peach::pear::pencil::pencil2::phone::pill::pine苹果::pizza::postal_horn::postbox::pouch::poultry_leg::pound::purse::pushpin::radio::ramen::ribbon::rice::rice_ball::rice_cracker::rice_scene::ring::rugby_football::running_shirt_with_sash::sake::sandal::santa::satellite::saxophone::school_satchel::scissors::scroll::seat::shaved_ice::shirt::shoe::shower::ski::smoking::snowboarder::soccer::sound::space_invader::spades::spaghetti::sparkle::sparkler::speaker::stew::straight_ruler::strawberry::surfer::sushi::sweet_potato::swimmer::syringe::tada::tanabata_tree::tangerine::tea::telephone::telephone_receiver::telescope::tennis::toilet::tomato::tophat::triangular_ruler::trophy::tropical_drink::trumpet::tshirt::tv::unlock::vhs::video_camera::video_game::violin::watch::watermelon::wind_chime::wine_glass::womans_clothes::womans_hat::wrench::yen: ","date":"2017-08-25","objectID":"/basic-markdown-preview/:21:3","tags":["Hugo","主题"],"title":"Markdown 基本语法预览","uri":"/basic-markdown-preview/"},{"categories":["预览"],"content":"Places :aerial_tramway::airplane::ambulance::anchor::articulated_lorry::atm::bank::barber::beginner::bike::blue_car::boat::bridge_at_night::bullettrain_front::bullettrain_side::bus::busstop::car::carousel_horse::checke红色_flag::church::circus_tent::city_sunrise::city_sunset::cn::construction::convenience_store::crossed_flags::de::department_store::es::european_castle::european_post_office::factory::ferris_wheel::fire_engine::fountain::fr::fuelpump::gb::helicopter::hospital::hotel::hotsprings::house::house_with_garden::it::izakaya_lantern::japan::japanese_castle::jp::kr::light_rail::love_hotel::minibus::monorail::mount_fuji::mountain_cableway::mountain_railway::moyai::office::oncoming_automobile::oncoming_bus::oncoming_police_car::oncoming_taxi::performing_arts::police_car::post_office::railway_car::rainbow::红色_car::rocket::roller_coaster::rotating_light::round_pushpin::rowboat::ru::sailboat::school::ship::slot_machine::speedboat::stars::station::statue_of_liberty::steam_locomotive::sunrise::sunrise_over_mountains::suspension_railway::taxi::tent::ticket::tokyo_tower::tractor::traffic_light::train::train2::tram::triangular_flag_on_post::trolleybus::truck::uk::us::vertical_traffic_light::warning::wedding: ","date":"2017-08-25","objectID":"/basic-markdown-preview/:21:4","tags":["Hugo","主题"],"title":"Markdown 基本语法预览","uri":"/basic-markdown-preview/"},{"categories":["预览"],"content":"Symbols :100::1234::a::ab::abc::abcd::accept::aquarius::aries::arrow_backward::arrow_double_down::arrow_double_up::arrow_down::arrow_down_small::arrow_forward::arrow_heading_down::arrow_heading_up::arrow_left::arrow_lower_left::arrow_lower_right::arrow_right::arrow_right_hook::arrow_up::arrow_up_down::arrow_up_small::arrow_upper_left::arrow_upper_right::arrows_clockwise::arrows_counterclockwise::b::baby_symbol::back::baggage_claim::ballot_box_with_check::bangbang::black_circle::black_large_square::black_medium_small_square::black_medium_square::black_small_square::black_square_button::cancer::capital_abcd::capricorn::chart::children_crossing::cinema::cl::clock1::clock10::clock1030::clock11::clock1130::clock12::clock1230::clock130::clock2::clock230::clock3::clock330::clock4::clock430::clock5::clock530::clock6::clock630::clock7::clock730::clock8::clock830::clock9::clock930::congratulations::cool::copyright::curly_loop::currency_exchange::customs::diamond_shape_with_a_dot_inside::do_not_litter::eight::eight_pointed_black_star::eight_spoked_asterisk::end::fast_forward::five::four::free::gemini::hash::heart_decoration::heavy_check_mark::heavy_division_sign::heavy_dollar_sign::heavy_exclamation_mark::heavy_minus_sign::heavy_multiplication_x::heavy_plus_sign::id::ideograph_advantage::information_source::interrobang::keycap_ten::koko::large_blue_circle::large_blue_diamond::large_橙色_diamond::left_luggage::left_right_arrow::leftwards_arrow_with_hook::leo::libra::link::m::mens::metro::mobile_phone_off::negative_squa红色_cross_mark::new::ng::nine::no_bicycles::no_entry::no_entry_sign::no_mobile_phones::no_pedestrians::no_smoking::non-potable_water::o::o2::ok::on::one::ophiuchus::parking::part_alternation_mark::passport_control::pisces::potable_water::put_litter_in_its_place::radio_button::recycle::红色_circle::registe红色::repeat::repeat_one::restroom::rewind::sa::sagittarius::scorpius::secret::seven::shipit::signal_strength::six::six_pointed_star::small_blue_diamond::small_橙色_diamond::small_红色_triangle::small_红色_triangle_down::soon::sos::symbols::taurus::three::tm::top::trident::twisted_rightwards_arrows::two::u5272::u5408::u55b6::u6307::u6708::u6709::u6e80::u7121::u7533::u7981::u7a7a::underage::up::vibration_mode::virgo::vs::wavy_dash::wc::wheelchair::white_check_mark::white_circle::white_flower::white_large_square::white_medium_small_square::white_medium_square::white_small_square::white_square_button::womens::x::zero: ","date":"2017-08-25","objectID":"/basic-markdown-preview/:21:5","tags":["Hugo","主题"],"title":"Markdown 基本语法预览","uri":"/basic-markdown-preview/"},{"categories":["预览"],"content":"Insert ^^insert^^ ^^*insert 倾斜*^^ *^^insert 倾斜 2^^* ^^_insert 倾斜_^^ _^^insert 倾斜 2^^_ ^^**insert 加粗**^^ **^^insert 加粗 2^^** ^^__insert 加粗__^^ __^^insert 加粗 2^^__ ^^***insert 倾斜 加粗***^^ ***^^insert 倾斜 加粗 2^^*** ^^___insert 倾斜 加粗___^^ ___^^insert 倾斜 加粗 2^^___ **^^*insert 倾斜 加粗*^^** *^^**insert 倾斜 加粗 2**^^* __^^_insert 倾斜 加粗_^^__ _^^__insert 倾斜 加粗 2__^^_ **^^_insert 倾斜 加粗_^^** _^^**insert 倾斜 加粗 2**^^_ __^^*insert 倾斜 加粗*^^__ *^^__insert 倾斜 加粗 2__^^* ^^insert^^ ^^insert 倾斜^^ ^^insert 倾斜 2^^ ^^insert 倾斜^^ ^^insert 倾斜 2^^ ^^insert 加粗^^ ^^insert 加粗 2^^ ^^insert 加粗^^ ^^insert 加粗 2^^ ^^insert 倾斜 加粗^^ ^^insert 倾斜 加粗 2^^ ^^insert 倾斜 加粗^^ ^^insert 倾斜 加粗 2^^ ^^insert 倾斜 加粗^^ ^^insert 倾斜 加粗 2^^ ^^insert 倾斜 加粗^^ ^^insert 倾斜 加粗 2^^ ^^insert 倾斜 加粗^^ ^^insert 倾斜 加粗 2^^ ^^insert 倾斜 加粗^^ ^^insert 倾斜 加粗 2^^ 这是一个基本的数字脚注 ↩︎ 带有 “label” 标签的脚注 ↩︎ 下定义的脚注 ↩︎ LoveIt 主题 ↩︎ ","date":"2017-08-25","objectID":"/basic-markdown-preview/:22:0","tags":["Hugo","主题"],"title":"Markdown 基本语法预览","uri":"/basic-markdown-preview/"},{"categories":["学习笔记"],"content":"类型与反射","date":"2017-08-20","objectID":"/%E7%B1%BB%E5%9E%8B%E4%B8%8E%E5%8F%8D%E5%B0%84/","tags":["学习笔记"],"title":"类型与反射","uri":"/%E7%B1%BB%E5%9E%8B%E4%B8%8E%E5%8F%8D%E5%B0%84/"},{"categories":["学习笔记"],"content":"类型与反射 ","date":"2017-08-20","objectID":"/%E7%B1%BB%E5%9E%8B%E4%B8%8E%E5%8F%8D%E5%B0%84/:0:0","tags":["学习笔记"],"title":"类型与反射","uri":"/%E7%B1%BB%E5%9E%8B%E4%B8%8E%E5%8F%8D%E5%B0%84/"},{"categories":["学习笔记"],"content":"java的类与Class RTTI(Run-Time TypeIdentification) 运行时类型识别 一个Class对象就是一个类的说明书 JVM根据这个说明书创建这个类的实例 静态变量的本质 object类的getClass方法可以提供该对象的具体的类 复习(本质时调用getClass后知道自己的类型) instanceof 强制类型转换 ","date":"2017-08-20","objectID":"/%E7%B1%BB%E5%9E%8B%E4%B8%8E%E5%8F%8D%E5%B0%84/:1:0","tags":["学习笔记"],"title":"类型与反射","uri":"/%E7%B1%BB%E5%9E%8B%E4%B8%8E%E5%8F%8D%E5%B0%84/"},{"categories":["学习笔记"],"content":"Class对象的生命周期 在第一次使用时被加载 || 链接 || 加载-\u003e||验证-\u003e准备-\u003e解析-\u003e||初始化 =\u003e类加载过程 查看类加载过程命令 verbose:class 过滤命令grep ","date":"2017-08-20","objectID":"/%E7%B1%BB%E5%9E%8B%E4%B8%8E%E5%8F%8D%E5%B0%84/:2:0","tags":["学习笔记"],"title":"类型与反射","uri":"/%E7%B1%BB%E5%9E%8B%E4%B8%8E%E5%8F%8D%E5%B0%84/"},{"categories":["学习笔记"],"content":"Class与ClassLoader Classloader负责从外部系统中加载一个类 这个类对应的Java文件并不需要存在 这个类（字节码）并不一定需要存在 文件的本质是字节流，所以可以网络加载字节码 Classloader的双亲委派加载模型 java语言规范与java虚拟机规范 Java Language Specification JLS Java virtual Machine Specification 这种分离提供了在JVM上运行其他语言的可能 ","date":"2017-08-20","objectID":"/%E7%B1%BB%E5%9E%8B%E4%B8%8E%E5%8F%8D%E5%B0%84/:3:0","tags":["学习笔记"],"title":"类型与反射","uri":"/%E7%B1%BB%E5%9E%8B%E4%B8%8E%E5%8F%8D%E5%B0%84/"},{"categories":["学习笔记"],"content":"反射与Spring反射 反射 动态创建对象 动态调用方法 动态获得属性 ","date":"2017-08-20","objectID":"/%E7%B1%BB%E5%9E%8B%E4%B8%8E%E5%8F%8D%E5%B0%84/:4:0","tags":["学习笔记"],"title":"类型与反射","uri":"/%E7%B1%BB%E5%9E%8B%E4%B8%8E%E5%8F%8D%E5%B0%84/"},{"categories":["学习笔记"],"content":"字符串原理","date":"2017-08-18","objectID":"/java%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8E%9F%E7%90%86/","tags":["学习笔记"],"title":"字符串原理","uri":"/java%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8E%9F%E7%90%86/"},{"categories":["学习笔记"],"content":"Java字符串原理 不可变的字符串 字符串是最重要的引用类型 ","date":"2017-08-18","objectID":"/java%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8E%9F%E7%90%86/:0:0","tags":["学习笔记"],"title":"字符串原理","uri":"/java%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8E%9F%E7%90%86/"},{"categories":["学习笔记"],"content":"字符串的不可变性 如何保证字符串的不可变性 String类是final类型的，因此是不可继承的 字符串是字符的容器，String =char[] 字符串数组是final的所有不能改变地址指向 为什么字符串是不可变的 安全：线程安全 ，存储安全 线程安全 因为字符串是不可变的所以所有线程只能读取字符串而不能更改，所以是线程安全的 存储安全 hashCode:将对象映射成一个数字 hashCode值的约定： 数值不可变性，决定了String对象不可变性 两个hashCode相等的对象，是一个对象。 缺点每次修改的时候都需要重复创建新的对象 StringBuffer和StringBuilder StringBuilder 不保证线程安全 可变字符序列，速度快 StringBuffer 线程安全的可变字符序列，相对速度慢 HashCode存储：将当前字符串的HashCode缓存起来 ","date":"2017-08-18","objectID":"/java%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8E%9F%E7%90%86/:1:0","tags":["学习笔记"],"title":"字符串原理","uri":"/java%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8E%9F%E7%90%86/"},{"categories":["学习笔记"],"content":"字符串与编码 Unicode（占用四个字节） code point(码点） byte order mark(头部不可见字符-字节顺序标记) BMP(基本多元平面16进制的码点) 编码 utf-8 变长的编码方案 utf-16-java程序内部的存储UniCode的方法 十进制转十六进制：常用的是2个字节，不常用是4个字节 解码 ","date":"2017-08-18","objectID":"/java%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8E%9F%E7%90%86/:2:0","tags":["学习笔记"],"title":"字符串原理","uri":"/java%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8E%9F%E7%90%86/"},{"categories":["学习笔记"],"content":"算法与数据结构","date":"2017-08-12","objectID":"/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/","tags":["学习笔记"],"title":"算法与数据结构","uri":"/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"categories":["学习笔记"],"content":"算法与数据结构 ","date":"2017-08-12","objectID":"/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/:0:0","tags":["学习笔记"],"title":"算法与数据结构","uri":"/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"categories":["学习笔记"],"content":"算法的复杂度 时间的复杂度 O(1)-哈希桶/数组随机寻址（常数） O(n) - 遍历（线性） 0(log(n))- 二分查找，二叉树（对数） O(n*log(n)) - 基于比较的排序算法的下界 O(n^2) - 冒泡排序 时间的复杂度的计算是忽略常数的 即O(n)=O(2n) 时间的复杂度的计算中，高阶复杂度会吞并低阶复杂度 O(n^2)+O(n)=O(n^2) ","date":"2017-08-12","objectID":"/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/:1:0","tags":["学习笔记"],"title":"算法与数据结构","uri":"/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"categories":["学习笔记"],"content":"基本数据结构 - 数组 随机寻址 常数时间 插入/删除 线性时间 查找 无序：线性时间 有序：对数时间（二分查找） ","date":"2017-08-12","objectID":"/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/:2:0","tags":["学习笔记"],"title":"算法与数据结构","uri":"/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"categories":["学习笔记"],"content":"基本数据结构 - 链表 寻址 线性时间 插入 常数时间 查找 线性时间 手写 翻转链表 判断链表是否成环 ","date":"2017-08-12","objectID":"/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/:3:0","tags":["学习笔记"],"title":"算法与数据结构","uri":"/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"categories":["学习笔记"],"content":"基本数据结构 - 栈（stack） FILO（first in last out） 应用：方法栈 ","date":"2017-08-12","objectID":"/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/:4:0","tags":["学习笔记"],"title":"算法与数据结构","uri":"/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"categories":["学习笔记"],"content":"基本数据结构 - 队列（queue） FIFO（first in first out） 应用：线程池 ","date":"2017-08-12","objectID":"/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/:5:0","tags":["学习笔记"],"title":"算法与数据结构","uri":"/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"categories":["学习笔记"],"content":"基本数据结构 - 哈希表 查找/插入/删除都是O（1） 哈希算法与碰撞 哈希桶的内部实现 ","date":"2017-08-12","objectID":"/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/:6:0","tags":["学习笔记"],"title":"算法与数据结构","uri":"/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"categories":["学习笔记"],"content":"HashMap HashMap默认容量 HashMap如何扩容 占用容量为 当前容量*0.75时进行扩容 transfer HashMap的数组大小为什么一定是2的幂 hash\u0026（length-1）按位与 只有数组的大小是2的n次方-1 二进制才能为1111进行按位与快速得到数组下标并且是均匀的 HashMap为什么是线程不安全的 Java7到8有哪儿些改进？为什么 ","date":"2017-08-12","objectID":"/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/:7:0","tags":["学习笔记"],"title":"算法与数据结构","uri":"/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"categories":["学习笔记"],"content":"哈希表简介 核心是基于哈希值的桶和链表 O（1）的平均查找、插入、删除时间 缺陷是哈希值的碰撞（collision） ","date":"2017-08-12","objectID":"/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/:7:1","tags":["学习笔记"],"title":"算法与数据结构","uri":"/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"categories":["学习笔记"],"content":"Java 7 HashMap 经典的哈希表实现：数组+链表 重点知识 初始容量 负载因子 哈希算法 扩容 低效 线程不安全 Java7 的HashMap的问题 容易碰到死锁 潜在安全隐患 CVE-2011-4858,TomCat邮件组的讨论 通过精心构造的恶意请求引发Dos（拒绝服务攻击） 链表性能退化 ","date":"2017-08-12","objectID":"/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/:7:2","tags":["学习笔记"],"title":"算法与数据结构","uri":"/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"categories":["学习笔记"],"content":"Java8 HashMap的改进 数组+链表/红黑树 使用红黑树的阈值为8符合泊松分布 扩容时插入顺序的改进 函数方法 forEach compute系列 Map的新API merge replace ","date":"2017-08-12","objectID":"/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/:7:3","tags":["学习笔记"],"title":"算法与数据结构","uri":"/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"categories":["Java8函数式编程"],"content":"Java8函数式编程","date":"2017-08-06","objectID":"/java8%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/","tags":["Java8函数式编程"],"title":"Java8函数式编程","uri":"/java8%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"},{"categories":["Java8函数式编程"],"content":"Java 8 函数式编程 ","date":"2017-08-06","objectID":"/java8%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/:0:0","tags":["Java8函数式编程"],"title":"Java8函数式编程","uri":"/java8%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"},{"categories":["Java8函数式编程"],"content":"什么是函数式编程 函数式：将一个对象映射成另一个对象 jdk工具类：predicate接口 实现predicate接口，传入一个对象映射成（返回）boolean值。 即使不实现predicate接口（满足predicate条件会自动转换成predicate实现），只要方法满足接受一个参照返回一个boolean值就可以使用函数式编程和lambda表达式。 使用方法引用减少代码量 类名::静态方法名 （将静态方法转换成函数接口） 方法引用可以通过静态方法名解释该操作的行为。 实现predicate 对象—\u003eboolean 1、lambda表达式 2、静态方法 3、实例方法 默认参数是（object this）返回boolean lambda表达式 （参数）-\u003e 操作语句 代码简洁，但是不易理解。 超过两行不建议使用lambda表达式 ","date":"2017-08-06","objectID":"/java8%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/:0:1","tags":["Java8函数式编程"],"title":"Java8函数式编程","uri":"/java8%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"},{"categories":["Java8函数式编程"],"content":"java函数接口 创建函数接口：任何只包含一个抽象方法的接口都可以被自动转换为函数接口 jdk函数接口： Consumer：处理（消耗）某个对象。 BiConsumer\u003cT,U\u003e:同时消耗两个对象。 Function\u003cT,R\u003e：将一个类型T映射（变换）成另一个类型R。 BiFunction\u003cT,U,R\u003e :将两个对象映射成一个对象。 Supplier:T get（）生产对象。 BooleanSupplier：创建boolean值 ","date":"2017-08-06","objectID":"/java8%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/:0:2","tags":["Java8函数式编程"],"title":"Java8函数式编程","uri":"/java8%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"},{"categories":["Java8函数式编程"],"content":"函数式编程Comparator 使用Comparator创建TreeSet排序规则 数据丢失问题，Set认为重复数据会去除重复数据。 ","date":"2017-08-06","objectID":"/java8%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/:0:3","tags":["Java8函数式编程"],"title":"Java8函数式编程","uri":"/java8%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"},{"categories":["学习笔记"],"content":"多线程爬虫以及ES海量数据分析","date":"2017-06-05","objectID":"/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%88%AC%E8%99%AB%E4%BB%A5%E5%8F%8Aes%E6%B5%B7%E9%87%8F%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/","tags":["学习笔记"],"title":"多线程爬虫以及ES海量数据分析","uri":"/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%88%AC%E8%99%AB%E4%BB%A5%E5%8F%8Aes%E6%B5%B7%E9%87%8F%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"},{"categories":["学习笔记"],"content":"多线程爬虫以及ES海量数据分析 ","date":"2017-06-05","objectID":"/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%88%AC%E8%99%AB%E4%BB%A5%E5%8F%8Aes%E6%B5%B7%E9%87%8F%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/:0:0","tags":["学习笔记"],"title":"多线程爬虫以及ES海量数据分析","uri":"/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%88%AC%E8%99%AB%E4%BB%A5%E5%8F%8Aes%E6%B5%B7%E9%87%8F%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"},{"categories":["学习笔记"],"content":"做项目原则 使用标准化、业界公认的模式和流程 代码仓库中不要有多余的文件 几乎没有本地依赖，使用者能毫无障碍的运行 提交PR时候应该有相应的的信息 小步快跑 尽量分成小的模块进行提交 越小的变更越容易修正问题 ","date":"2017-06-05","objectID":"/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%88%AC%E8%99%AB%E4%BB%A5%E5%8F%8Aes%E6%B5%B7%E9%87%8F%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/:0:1","tags":["学习笔记"],"title":"多线程爬虫以及ES海量数据分析","uri":"/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%88%AC%E8%99%AB%E4%BB%A5%E5%8F%8Aes%E6%B5%B7%E9%87%8F%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"},{"categories":["学习笔记"],"content":"多线程爬虫以及ES海量数据分析项目的原则 使用GitHub+主干/分支模型进行开发 禁止直接push master 所有变更通过PR进行 自动化代码质量检查+测试 Checkstyle/SpotBugs 最基本的自动化测试覆盖 一切工作自动化 规范化提交流程 ","date":"2017-06-05","objectID":"/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%88%AC%E8%99%AB%E4%BB%A5%E5%8F%8Aes%E6%B5%B7%E9%87%8F%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/:0:2","tags":["学习笔记"],"title":"多线程爬虫以及ES海量数据分析","uri":"/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%88%AC%E8%99%AB%E4%BB%A5%E5%8F%8Aes%E6%B5%B7%E9%87%8F%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"},{"categories":["学习笔记"],"content":"创建项目骨架 新建GitHub仓库 建立新项目 mvn archetype（创建项目骨架） 通过mvn archetype:generate命令生成项目骨架 IDEA - new 通过IDEA创建项目骨架 .gitignore README 配置基本的代码质量检查检查插件 越早代价越低 ","date":"2017-06-05","objectID":"/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%88%AC%E8%99%AB%E4%BB%A5%E5%8F%8Aes%E6%B5%B7%E9%87%8F%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/:0:3","tags":["学习笔记"],"title":"多线程爬虫以及ES海量数据分析","uri":"/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%88%AC%E8%99%AB%E4%BB%A5%E5%8F%8Aes%E6%B5%B7%E9%87%8F%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"},{"categories":["学习笔记"],"content":"项目的设计流程 自顶向下 多人协作 多模块 各模块间职责明确，界限清晰 基本的文档 -基本的接口 小步提交 自底向上 先实现功能 将公用代码抽离出来 通过重构实现模块化、接口化 ","date":"2017-06-05","objectID":"/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%88%AC%E8%99%AB%E4%BB%A5%E5%8F%8Aes%E6%B5%B7%E9%87%8F%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/:0:4","tags":["学习笔记"],"title":"多线程爬虫以及ES海量数据分析","uri":"/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%88%AC%E8%99%AB%E4%BB%A5%E5%8F%8Aes%E6%B5%B7%E9%87%8F%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"},{"categories":["学习笔记"],"content":"创建CI 创建测试类（冒烟测试） - 用注解方式（@Test）创建test方法 引入测试类相关maven依赖 \u003cdependencys\u003e \u003cdependency\u003e \u003cgroupId\u003eorg.junit.jupiter\u003c/groupId\u003e \u003cartifactId\u003ejunit-jupiter-api\u003c/artifactId\u003e \u003cversion\u003e5.6.0\u003c/version\u003e \u003cscope\u003etest\u003c/scope\u003e \u003c/dependency\u003e \u003cdependency\u003e \u003cgroupId\u003eorg.junit.jupiter\u003c/groupId\u003e \u003cartifactId\u003ejunit-jupiter-engine\u003c/artifactId\u003e \u003cversion\u003e5.6.0\u003c/version\u003e \u003cscope\u003etest\u003c/scope\u003e \u003c/dependency\u003e \u003c/dependencys\u003e \u003cplugins\u003e \u003cplugin\u003e \u003cartifactId\u003emaven-surefire-plugin\u003c/artifactId\u003e \u003cversion\u003e2.22.1\u003c/version\u003e \u003cconfiguration\u003e \u003cargLine\u003e-Dfile.encoding=UTF-8\u003c/argLine\u003e \u003c/configuration\u003e \u003c/plugin\u003e \u003cplugin\u003e \u003cartifactId\u003emaven-checkstyle-plugin\u003c/artifactId\u003e \u003cversion\u003e3.1.0\u003c/version\u003e \u003cconfiguration\u003e \u003cconfigLocation\u003e${basedir}/.circleci/checkstyle.xml\u003c/configLocation\u003e \u003cincludeTestSourceDirectory\u003etrue\u003c/includeTestSourceDirectory\u003e \u003cenableRulesSummary\u003efalse\u003c/enableRulesSummary\u003e \u003c/configuration\u003e \u003cexecutions\u003e \u003cexecution\u003e \u003cid\u003ecompile\u003c/id\u003e \u003cphase\u003ecompile\u003c/phase\u003e \u003cgoals\u003e \u003cgoal\u003echeck\u003c/goal\u003e \u003c/goals\u003e \u003c/execution\u003e \u003c/executions\u003e \u003cdependencies\u003e \u003cdependency\u003e \u003cgroupId\u003ecom.puppycrawl.tools\u003c/groupId\u003e \u003cartifactId\u003echeckstyle\u003c/artifactId\u003e \u003cversion\u003e8.29\u003c/version\u003e \u003c/dependency\u003e \u003c/dependencies\u003e \u003c/plugin\u003e \u003c/plugins\u003e 如果不小心提交了代码使用git reset HEAD~1返回上一次提交前的操作 reset-\u003e重启 commit git reset HEAD~1 如果push到master上，使用git revert，使用git long 查看提交的id后 使用 git revert id 撤回提交 如果不小心commit并且push了，如果在主干上则删除多余的提交文件，如果在自己的分支上则已同样的方式并且force push。 创建分支 通过git checkout -b 分支名称 创建分支 查看git状态 git status ","date":"2017-06-05","objectID":"/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%88%AC%E8%99%AB%E4%BB%A5%E5%8F%8Aes%E6%B5%B7%E9%87%8F%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/:0:5","tags":["学习笔记"],"title":"多线程爬虫以及ES海量数据分析","uri":"/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%88%AC%E8%99%AB%E4%BB%A5%E5%8F%8Aes%E6%B5%B7%E9%87%8F%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"},{"categories":["学习笔记"],"content":"算法 深度优先 广度优先 优先访问一个层次内容 常用队列实现 JDK的队列实现 程序流程 从池中拿出一个链接，如果是没有处理过并且是想要处理的链接就进行处理，把新链接放入池中，如果是新闻链接就存储内容。将处理完的链接删除 Arraylist从尾部删除元素更有效率 ","date":"2017-06-05","objectID":"/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%88%AC%E8%99%AB%E4%BB%A5%E5%8F%8Aes%E6%B5%B7%E9%87%8F%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/:0:6","tags":["学习笔记"],"title":"多线程爬虫以及ES海量数据分析","uri":"/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%88%AC%E8%99%AB%E4%BB%A5%E5%8F%8Aes%E6%B5%B7%E9%87%8F%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"},{"categories":["学习笔记"],"content":"处理页面流程 通过httpClient发送http请求并获取http响应. 2.通过jsoup获取html内容 通过Jsoup.parse(html);解析html \u003cdependency\u003e \u003cgroupId\u003eorg.jsoup\u003c/groupId\u003e \u003cartifactId\u003ejsoup\u003c/artifactId\u003e \u003cversion\u003e1.13.1\u003c/version\u003e \u003c/dependency\u003e 抓取新闻中出现的问题 重复抓取 “https://sina.cn” 因为没有吧链接池中移除已经处理的链接 重复抓取“https://sina.cn/?reload=sina” 因为处理完成后没有将处理完成的链接加入处理完成的链接池 3.弹出新浪的登陆页 因为没有设置user-agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.113 Safari/537. 4 因为链接头为//开始的所以需要加上https 重构代码 将复杂的逻辑提取成短小的方法。 使用stream使代码更加简洁。 Maven生命周期与插件配置 自动检查工具设置。 spotbugs(findbugs) 引入maven依赖 \u003cplugin\u003e \u003cgroupId\u003ecom.github.spotbugs\u003c/groupId\u003e \u003cartifactId\u003espotbugs-maven-plugin\u003c/artifactId\u003e \u003cversion\u003e4.0.0\u003c/version\u003e \u003cdependencies\u003e \u003c!-- overwrite dependency on spotbugs if you want to specify the version of spotbugs --\u003e \u003cdependency\u003e \u003cgroupId\u003ecom.github.spotbugs\u003c/groupId\u003e \u003cartifactId\u003espotbugs\u003c/artifactId\u003e \u003cversion\u003e4.0.4\u003c/version\u003e \u003c/dependency\u003e \u003c/dependencies\u003e \u003c/plugin\u003e 使用mvn spotbugs:check命令 使用mvn spotbugs:gui命令以图形化方式提示错误 如何阅读和使用官方文档 maven生命周期（maven lifecycle） 通过插件(plugin)绑定到某个maven阶段进行检查 数据持久化 创建数据表 links_to_be_processed links_already_processed news news表属性 id title content url created_at modified_at create table news ( id bigint primary key AUTO_INCREMENT, title text, content text, url varchar(200), created_at timestamp, modified_at timestamp ) JDBC操作 获取加载驱动DriverManger并创建连接connection 通过连接并创建预处理语句 执行查询并获取结果 String url=\"jdbc:h2:file:J:\\\\Crawler\\\\news\"; String sql=\"select link from links_to_be_processed\"; Connection connection = DriverManager.getConnection(url); PreparedStatement statement = connection.prepareStatement(sql); ResultSet resultSet = statement.executeQuery(); 添加断点续存 使用数据库实时的存储数据 使用URLDecoder.decode进行字符转码。 String href = URLDecoder.decode(aTag.attr(\"href\"), \"UTF-8\");~ 自动化数据库构建工具Flyway Flyway 可以对数据库结构进行版本控制 添加Flyway依赖 \u003cplugin\u003e \u003cgroupId\u003eorg.flywaydb\u003c/groupId\u003e \u003cartifactId\u003eflyway-maven-plugin\u003c/artifactId\u003e \u003cversion\u003e6.4.4\u003c/version\u003e \u003cconfiguration\u003e \u003curl\u003ejdbc:h2:file:J:\\Crawler\\news\u003c/url\u003e \u003cuser\u003eryan\u003c/user\u003e \u003cpassword\u003e123\u003c/password\u003e \u003c/configuration\u003e \u003c/plugin\u003e 创建文件夹目录并创建sql文件 my-project src main resources db migration R__My_view.sql U1.1__Fix_indexes.sql U2__Add a new table.sql V1__Initial_version.sql V1.1__Fix_indexes.sql V2__Add a new table.sql 运行mvn flyway：migrate ORM(Object Relation Mapping) ORM框架MyBatis 添加MyBatisMaven依赖 \u003cdependency\u003e \u003cgroupId\u003eorg.mybatis\u003c/groupId\u003e \u003cartifactId\u003emybatis\u003c/artifactId\u003e \u003cversion\u003e3.5.5\u003c/version\u003e \u003c/dependency\u003e 创建MyBatis 配置数据库连接配置文件 \u003c?xml version=\"1.0\" encoding=\"UTF-8\" ?\u003e \u003c!DOCTYPE configuration PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-config.dtd\"\u003e \u003cconfiguration\u003e \u003cenvironments default=\"development\"\u003e \u003cenvironment id=\"development\"\u003e \u003ctransactionManager type=\"JDBC\"/\u003e \u003cdataSource type=\"POOLED\"\u003e \u003cproperty name=\"driver\" value=\"${driver}\"/\u003e \u003cproperty name=\"url\" value=\"${url}\"/\u003e \u003cproperty name=\"username\" value=\"${username}\"/\u003e \u003cproperty name=\"password\" value=\"${password}\"/\u003e \u003c/dataSource\u003e \u003c/environment\u003e \u003c/environments\u003e \u003cmappers\u003e \u003cmapper resource=\"org/mybatis/example/BlogMapper.xml\"/\u003e \u003c/mappers\u003e \u003c/configuration\u003e 配置数据库配置文件操作 \u003c?xml version=\"1.0\" encoding=\"UTF-8\" ?\u003e \u003c!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"\u003e \u003cmapper namespace=\"org.mybatis.example.BlogMapper\"\u003e \u003cselect id=\"selectBlog\" resultType=\"Blog\"\u003e select * from Blog where id = #{id} \u003c/select\u003e \u003c/mapper\u003e 使用SqlSession对数据进行增删改查 try (SqlSession session = sqlSessionFactory.openSession()) { Blog blog = (Blog) session.selectOne(\"org.mybatis.example.BlogMapper.selectBlog\", 101); } 使用docker容器中的MySql 安装好docker后json配置加速镜像 { \"registry-mirrors\": [ \"https://hub-mirror.c.163.com\", \"https://mirror.baidubce.com\" ] } docker教程 https://yeasy.gitbook.io/docker_practice/ 下载Mysql docker镜像 docker run --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag 使用jdbc链接mysql -v参数使数据持久化（将数据存储到物理机的硬盘中）-v参数将docker容器中的数据映射到主机上 -p 参数将容器的端口映射到主机中 创建MySQL数据库 docker run --name mysql -e MYSQL_ROOT_PASSWORD=123 -p 33","date":"2017-06-05","objectID":"/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%88%AC%E8%99%AB%E4%BB%A5%E5%8F%8Aes%E6%B5%B7%E9%87%8F%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/:0:7","tags":["学习笔记"],"title":"多线程爬虫以及ES海量数据分析","uri":"/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%88%AC%E8%99%AB%E4%BB%A5%E5%8F%8Aes%E6%B5%B7%E9%87%8F%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"},{"categories":["多线程"],"content":"多线程","date":"2017-04-15","objectID":"/%E5%A4%9A%E7%BA%BF%E7%A8%8B/","tags":["多线程"],"title":"多线程","uri":"/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"},{"categories":["多线程"],"content":"1 多线程与并发原理 Java 的执行模型是同步/阻塞（block）的 默认情况下只有一个线程 处理问题非常自然 但具有严重的性能问题 ","date":"2017-04-15","objectID":"/%E5%A4%9A%E7%BA%BF%E7%A8%8B/:0:1","tags":["多线程"],"title":"多线程","uri":"/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"},{"categories":["多线程"],"content":"2 Thread Java中只有这么一种东西代表线程 start方法才能并发执行 没多开一个线程，就多一个执行流 方法栈（局部变量）是线程私有的 静态变量/类变量是被所有线程共享的 ","date":"2017-04-15","objectID":"/%E5%A4%9A%E7%BA%BF%E7%A8%8B/:0:2","tags":["多线程"],"title":"多线程","uri":"/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"},{"categories":["多线程"],"content":"3 多线程带来的性能的提升 对于IO密集型应用极其有用 网络IO（通常包括数据库） 文件IO 对于密集型应用稍有折扣 性能提升上线，单核CPU100 为什么需要多线程？ 多线程带来了什么问题，如何避免？ 线程的属性、状态、生命周期详解 什么是ThreadLocal？ 为什么需要线程池？ 线程池的构造函数中的参数都是什么含义？ 线程安全 原子性 共享变量 默认的实现几乎都是线程不安全的 线程不安全的表现 数据错误 i++ if-then-do hashMap线程不安全原因：“https://blog.csdn.net/luxia_24/article/details/52344367”// “https://mp.weixin.qq.com/s?src=3\u0026timestamp=1587039264\u0026ver=1\u0026signature=6oFg-q-hiaeFxUciDdYlmAEh5vUmrF5V-wlMFqRLzDV*FYd6yL4pdWokFybdsFj0NoxuZuOIgnY1Mwv-3FLVI2V61gJruVhB1aRnaZIBGp5Vz9Pbt9JTIh-BWFSS4HY9Yclh-xi8nJ8eCan6LeDn8gv6M2w0cCoMauf-XnmdqOg=” hashMap 死循环问题 死锁例子： 有四个上锁的门A1、B1、A2、B2,A1中放着B1，A2中放着B2。钥匙一可以打开A1,A2,钥匙二可以打开B1,B2。 小明拿着钥匙一打开了A1的门,必须使用钥匙二打开B1的门才可以出去，而钥匙二小红打开了B2的门，需要钥匙一才可以打开A2的门。 等待对方归还钥匙才能出去。 死锁原因： 多个线程相互持有对方资源，促使单独一方没有获取全部资源使程序无法继续执行下去。 死锁问题排查 1、找到死锁进程ID jps：列出Java进程命令。 2、jstack 进程ID。 打印当前进程所有信息 3、 看方法栈（stack）停留的位置。看Java的提示。 多线程的经典问题：哲学家用餐问题 synchronized同步 预防死锁产生的原则： 释放资源 所有的线程都按照相同的顺序所得资源的锁 ","date":"2017-04-15","objectID":"/%E5%A4%9A%E7%BA%BF%E7%A8%8B/:0:3","tags":["多线程"],"title":"多线程","uri":"/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"},{"categories":["多线程"],"content":"线程安全 实现线程安全的基本手段 不可变类 Interger/String/… synchronized 同步块 同步块是什么东西？ synchronized指定一个对象把这个对象当成锁 static synchronized 方法 把class对象当成锁 等价于下面代码 - 实例的synchronized方法把该实例当成实例锁 synchronized(this){ } Collection.synchronized（线程同步工具方法） 所有的集合线程都不是安全的，比如 list map link hashMap treeSet 实现线程安全的基本手段 JUC工具包 AtomicInteger/..（原子级） i++不是原子的 cup从内存中取i +1 把结果写回内存 ConcurrentHashMap(同步HashMap) 任何使用HashMap有线程安全问题的地方，都可以使用ConcurrentHashMap替换即可。 ReentrantLock（可重入锁） 一个地方加锁，在另一个地方解锁 ","date":"2017-04-15","objectID":"/%E5%A4%9A%E7%BA%BF%E7%A8%8B/:0:4","tags":["多线程"],"title":"多线程","uri":"/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"},{"categories":["多线程"],"content":"Object类里的线程方法 线程的历史 Java从一开始就把线程作为语言的特性，提供语言级的支持 为什么java中所有的对象都可以成为锁？ Object.wait()/notify()/notifyAll()方法 ","date":"2017-04-15","objectID":"/%E5%A4%9A%E7%BA%BF%E7%A8%8B/:0:5","tags":["多线程"],"title":"多线程","uri":"/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"},{"categories":["多线程"],"content":"多线程的经典问题_生产者/消费者模型 使用三种方法来解决它 wait()/notify/notifyAll Lock/Condition BlockingQueue ","date":"2017-04-15","objectID":"/%E5%A4%9A%E7%BA%BF%E7%A8%8B/:0:6","tags":["多线程"],"title":"多线程","uri":"/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"},{"categories":["多线程"],"content":"线程池与Callable/Future 什么是线程池 Executors(线程) 线程是昂贵的（Java线程模型的缺陷） Java线程与系统中的线程进行绑定 线程池是预先定义好的若干个线程 Java中的线程池 Callable/Future 类比Runnable,Callable可以返回值，抛出异常 Future代表一个“未来才会返回的结果” ","date":"2017-04-15","objectID":"/%E5%A4%9A%E7%BA%BF%E7%A8%8B/:0:7","tags":["多线程"],"title":"多线程","uri":"/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"},{"categories":["学习笔记"],"content":"异常","date":"2017-02-27","objectID":"/%E5%BC%82%E5%B8%B8/","tags":["学习笔记"],"title":"异常","uri":"/%E5%BC%82%E5%B8%B8/"},{"categories":["学习笔记"],"content":"1 Java的异常体系简介 在return语句之外，为方法提供另外的一种出口 IOException通常代表“预期之内的异常” ","date":"2017-02-27","objectID":"/%E5%BC%82%E5%B8%B8/:1:0","tags":["学习笔记"],"title":"异常","uri":"/%E5%BC%82%E5%B8%B8/"},{"categories":["学习笔记"],"content":"2 try/catch/finally 如果没有try,异常将击穿所有栈帧 catch可以将一个异常抓住 finally执行清理工作 JDK7+:try-with-resources ","date":"2017-02-27","objectID":"/%E5%BC%82%E5%B8%B8/:2:0","tags":["学习笔记"],"title":"异常","uri":"/%E5%BC%82%E5%B8%B8/"},{"categories":["学习笔记"],"content":"3 throw/throws throw 抛出一个异常 可以被丢出来的异常和错误 throws只是一个声明 ","date":"2017-02-27","objectID":"/%E5%BC%82%E5%B8%B8/:3:0","tags":["学习笔记"],"title":"异常","uri":"/%E5%BC%82%E5%B8%B8/"},{"categories":["学习笔记"],"content":"Java的异常体系 Throwable-可以被抛出的东西（有毒） Exception-checked exception(受检异常，有毒) 意料之中的异常,IOException RuntimeException(运行时异常，无毒) Error (错误，有毒) 代表一种不正常的情况，内存溢出 catch的级联与合并 处理异常 ","date":"2017-02-27","objectID":"/%E5%BC%82%E5%B8%B8/:3:1","tags":["学习笔记"],"title":"异常","uri":"/%E5%BC%82%E5%B8%B8/"},{"categories":["学习笔记"],"content":"异常的栈轨迹 ","date":"2017-02-27","objectID":"/%E5%BC%82%E5%B8%B8/:4:0","tags":["学习笔记"],"title":"异常","uri":"/%E5%BC%82%E5%B8%B8/"},{"categories":["学习笔记"],"content":"Throwable 栈轨迹Stacktrace(排查问题最重要的信息) 异常链（Caused by） ","date":"2017-02-27","objectID":"/%E5%BC%82%E5%B8%B8/:4:1","tags":["学习笔记"],"title":"异常","uri":"/%E5%BC%82%E5%B8%B8/"},{"categories":["学习笔记"],"content":"异常抛出的原则 1 能用if/else处理的，不使用异常 2 尽早抛出异常 3 异常要准确、带有详细信息 4 抛出异常也比悄悄的执行错误的逻辑强多 ","date":"2017-02-27","objectID":"/%E5%BC%82%E5%B8%B8/:5:0","tags":["学习笔记"],"title":"异常","uri":"/%E5%BC%82%E5%B8%B8/"},{"categories":["学习笔记"],"content":"异常的处理原则 本方法是否有责任处理这个异常？ 不要处理不归自己管的异常 本方法是否有能力处理这个异常？ 如果自己无法处理，就抛出 如非必要，不要忽略异常 ","date":"2017-02-27","objectID":"/%E5%BC%82%E5%B8%B8/:5:1","tags":["学习笔记"],"title":"异常","uri":"/%E5%BC%82%E5%B8%B8/"},{"categories":["学习笔记"],"content":"JDK常见异常 NullPointerException(空指针异常) ClassNotFoundException(不存在类的异常)/NoClassDeFoundError IllegalStateException（不正常的状态） IllegalArgumentException（不正常的参数） IllegalAccessException（非法访问） ClassCastException ","date":"2017-02-27","objectID":"/%E5%BC%82%E5%B8%B8/:5:2","tags":["学习笔记"],"title":"异常","uri":"/%E5%BC%82%E5%B8%B8/"},{"categories":["学习笔记"],"content":"HttpClient工具的使用","date":"2017-02-22","objectID":"/httpclint/","tags":["学习笔记"],"title":"HttpClient","uri":"/httpclint/"},{"categories":["学习笔记"],"content":"HttpClients使用 ","date":"2017-02-22","objectID":"/httpclint/:0:0","tags":["学习笔记"],"title":"HttpClient","uri":"/httpclint/"},{"categories":["学习笔记"],"content":"1 创建Maven依赖 \u003c!-- https://mvnrepository.com/artifact/org.apache.httpcomponents/httpclient --\u003e \u003cdependency\u003e \u003cgroupId\u003eorg.apache.httpcomponents\u003c/groupId\u003e \u003cartifactId\u003ehttpclient\u003c/artifactId\u003e \u003cversion\u003e4.5.11\u003c/version\u003e \u003c/dependency\u003e ","date":"2017-02-22","objectID":"/httpclint/:1:0","tags":["学习笔记"],"title":"HttpClient","uri":"/httpclint/"},{"categories":["学习笔记"],"content":"2 创建Get请求 教程：http://hc.apache.org/httpcomponents-client-ga/index.html //创建HttpClient实例 CloseableHttpClient httpclient = HttpClients.createDefault(); //创建Get请求实例 HttpGet httpGet = new HttpGet(\"http://targethost/homepage\"); //添加Header //所在主机 httpGet.addHeader(\"User-Agent\",\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.116 Safari/537.36\"); //想要的数据类型 httpGet.addHeader(\"Content-Type\",\"text/html; charset=utf-8\"); //执行请求 CloseableHttpResponse response1 = httpclient.execute(httpGet); // The underlying HTTP connection is still held by the response object // to allow the response content to be streamed directly from the network socket. // In order to ensure correct deallocation of system resources // the user MUST call CloseableHttpResponse#close() from a finally clause. // Please note that if response content is not fully consumed the underlying // connection cannot be safely re-used and will be shut down and discarded // by the connection manager. try { System.out.println(response1.getStatusLine()); HttpEntity entity1 = response1.getEntity(); // do something useful with the response body // and ensure it is fully consumed EntityUtils.consume(entity1); } finally { response1.close(); } //创建Post请求 HttpPost httpPost = new HttpPost(\"http://targethost/login\"); List \u003cNameValuePair\u003e nvps = new ArrayList \u003cNameValuePair\u003e(); nvps.add(new BasicNameValuePair(\"username\", \"vip\")); nvps.add(new BasicNameValuePair(\"password\", \"secret\")); httpPost.setEntity(new UrlEncodedFormEntity(nvps)); CloseableHttpResponse response2 = httpclient.execute(httpPost); try { System.out.println(response2.getStatusLine()); HttpEntity entity2 = response2.getEntity(); // do something useful with the response body // and ensure it is fully consumed EntityUtils.consume(entity2); } finally { response2.close(); } ","date":"2017-02-22","objectID":"/httpclint/:2:0","tags":["学习笔记"],"title":"HttpClient","uri":"/httpclint/"},{"categories":["学习笔记"],"content":"3 HTML解析器Jsoup Maven依赖 \u003cdependency\u003e \u003cgroupId\u003eorg.jsoup\u003c/groupId\u003e \u003cartifactId\u003ejsoup\u003c/artifactId\u003e \u003cversion\u003e1.11.2\u003c/version\u003e \u003c/dependency\u003e 解析String类型的html Document document = Jsoup.parse(html); // 将字符串解析成Document对象 Jsoup可以使用Jsoup中提供的一些静态方法从网络获取html文档并进行解析成Document对象 public static void main(String[] args) throws Exception{ Document document = Jsoup.connect(\"http://blog.beifengtz.com/\").get(); System.out.println(document); } // 爬取GitHub的Pull request并存储为CSV文件 package com.github.hcsp.io; import org.apache.commons.io.FileUtils; import org.apache.http.HttpStatus; import org.apache.http.client.methods.CloseableHttpResponse; import org.apache.http.client.methods.HttpGet; import org.apache.http.impl.client.CloseableHttpClient; import org.apache.http.impl.client.HttpClients; import org.apache.http.util.EntityUtils; import org.jsoup.Jsoup; import org.jsoup.nodes.Document; import org.jsoup.nodes.Element; import java.io.File; import java.io.IOException; import java.util.ArrayList; import java.util.Collections; public class Crawler { // 给定一个仓库名，例如\"golang/go\"，或者\"gradle/gradle\"，读取前n个Pull request并保存至csvFile指定的文件中，格式如下： // number,author,title // 12345,blindpirate,这是一个标题 // 12345,FrankFang,这是第二个标题 public static void savePullRequestsToCSV(String repo, int n, File csvFile) throws IOException { String html = \"\"; CloseableHttpClient httpclient = HttpClients.createDefault(); HttpGet httpGet = new HttpGet(\"http://GitHub.com/\" + repo + \"/pulls\"); CloseableHttpResponse response = httpclient.execute(httpGet); try { if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) { html = EntityUtils.toString(response.getEntity(), \"UTF-8\"); } Document document = Jsoup.parse(html); ArrayList\u003cElement\u003e elements = document.select(\".js-issue-row\"); FileUtils.writeLines(csvFile, Collections.singleton(\"number,author,title\"), true); if ((elements.size() \u003e= n) \u0026\u0026 (n \u003e= 0)) { for (int i = 0; i \u003c n; i++) { String number = elements.get(i).attr(\"id\").split(\"_\")[1]; String title = elements.get(i).select(\"[data-hovercard-type=pull_request]\").text(); String author = elements.get(i).select(\"[data-hovercard-type=user]\").text(); StringBuffer pr = new StringBuffer().append(number).append(\",\").append(author).append(\",\").append(title); FileUtils.writeLines(csvFile, Collections.singleton(pr), true); } } } finally { response.close(); } } } 配置Maven \u003cproject xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"\u003e \u003cmodelVersion\u003e4.0.0\u003c/modelVersion\u003e \u003cgroupId\u003ehcsp\u003c/groupId\u003e \u003cartifactId\u003esave-pull-requests-to-csv\u003c/artifactId\u003e \u003cversion\u003e1.0-SNAPSHOT\u003c/version\u003e \u003cproperties\u003e \u003cmaven.compiler.source\u003e1.8\u003c/maven.compiler.source\u003e \u003cmaven.compiler.target\u003e1.8\u003c/maven.compiler.target\u003e \u003cproject.build.sourceEncoding\u003eUTF-8\u003c/project.build.sourceEncoding\u003e \u003c/properties\u003e \u003crepositories\u003e \u003crepository\u003e \u003cid\u003ealimaven\u003c/id\u003e \u003cname\u003ealiyun maven\u003c/name\u003e \u003curl\u003ehttp://maven.aliyun.com/nexus/content/groups/public/\u003c/url\u003e \u003c/repository\u003e \u003c/repositories\u003e \u003cdependencies\u003e \u003cdependency\u003e \u003cgroupId\u003eorg.kohsuke\u003c/groupId\u003e \u003cartifactId\u003egithub-api\u003c/artifactId\u003e \u003cversion\u003e1.95\u003c/version\u003e \u003cscope\u003etest\u003c/scope\u003e \u003c/dependency\u003e \u003cdependency\u003e \u003cgroupId\u003ecom.opencsv\u003c/groupId\u003e \u003cartifactId\u003eopencsv\u003c/artifactId\u003e \u003cversion\u003e4.6\u003c/version\u003e \u003cscope\u003etest\u003c/scope\u003e \u003c/dependency\u003e \u003cdependency\u003e \u003cgroupId\u003eorg.junit.jupiter\u003c/groupId\u003e \u003cartifactId\u003ejunit-jupiter-api\u003c/artifactId\u003e \u003cversion\u003e5.6.0\u003c/version\u003e \u003cscope\u003etest\u003c/scope\u003e \u003c/dependency\u003e \u003cdependency\u003e \u003cgroupId\u003eorg.junit.jupiter\u003c/groupId\u003e \u003cartifactId\u003ejunit-jupiter-engine\u003c/artifactId\u003e \u003cversion\u003e5.6.0\u003c/version\u003e \u003cscope\u003etest\u003c/scope\u003e \u003c/dependency\u003e \u003c!-- https://mvnrepository.com/artifact/org.apache.httpcomponents/httpclient --\u003e \u003cdependency\u003e \u003cgroupId\u003eorg.apache.httpcomponents\u003c/groupId\u003e \u003cartifactId\u003ehttpclient\u003c/artifactId\u003e \u003cversion\u003e4.5.11\u003c/version\u003e \u003c/dependency\u003e \u003c!-- https://mvnrepository.com/artifact/org.jsoup/jsoup --\u003e \u003cdependency\u003e \u003cgroupId\u003eorg.jsoup\u003c/groupId\u003e \u003cartifactId\u003ejsoup\u003c/artifactId\u003e \u003cversion\u003e1.12.","date":"2017-02-22","objectID":"/httpclint/:3:0","tags":["学习笔记"],"title":"HttpClient","uri":"/httpclint/"},{"categories":["学习笔记"],"content":"Web前后端基础架构原理","date":"2017-02-07","objectID":"/web%E5%89%8D%E5%90%8E%E7%AB%AF%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84%E5%8E%9F%E7%90%86/","tags":["学习笔记"],"title":"Web前后端基础架构原理","uri":"/web%E5%89%8D%E5%90%8E%E7%AB%AF%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84%E5%8E%9F%E7%90%86/"},{"categories":["学习笔记"],"content":"Web前后端基础架构原理 ","date":"2017-02-07","objectID":"/web%E5%89%8D%E5%90%8E%E7%AB%AF%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84%E5%8E%9F%E7%90%86/:0:0","tags":["学习笔记"],"title":"Web前后端基础架构原理","uri":"/web%E5%89%8D%E5%90%8E%E7%AB%AF%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84%E5%8E%9F%E7%90%86/"},{"categories":["学习笔记"],"content":"1 计算机网络是如何工作的 在打开网页的时候发生了什么 主机 域名与DNS 端口：HTTPS协议的默认端口是443，HTTP协议默认的端口是80 TCP协议 HTTP协议 ","date":"2017-02-07","objectID":"/web%E5%89%8D%E5%90%8E%E7%AB%AF%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84%E5%8E%9F%E7%90%86/:1:0","tags":["学习笔记"],"title":"Web前后端基础架构原理","uri":"/web%E5%89%8D%E5%90%8E%E7%AB%AF%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84%E5%8E%9F%E7%90%86/"},{"categories":["学习笔记"],"content":"2 使用Java代码访问GitHub的issues 选择一个合适的客户端 如何快速上手使用自己从没用过的库？ 设置正确的HTTP header 发送请求，等待响应 解析拿到的响应 ","date":"2017-02-07","objectID":"/web%E5%89%8D%E5%90%8E%E7%AB%AF%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84%E5%8E%9F%E7%90%86/:1:1","tags":["学习笔记"],"title":"Web前后端基础架构原理","uri":"/web%E5%89%8D%E5%90%8E%E7%AB%AF%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84%E5%8E%9F%E7%90%86/"},{"categories":["学习笔记"],"content":"3 同步加载与异步加载 1 发送请求 2 接受响应 html 3 html转换成Document 4 筛选值 // 给定一个仓库名，例如\"golang/go\"，或者\"gradle/gradle\"，返回第一页的Pull request信息 public static List\u003cGitHubPullRequest\u003e getFirstPageOfPullRequests(String repo) throws IOException { List\u003cGitHubPullRequest\u003e pr = new ArrayList\u003c\u003e(); CloseableHttpClient httpclient = HttpClients.createDefault(); HttpGet httpGet = new HttpGet(\"https://github.com/\" + repo + \"/pulls\"); CloseableHttpResponse response1 = httpclient.execute(httpGet); try { HttpEntity entity1 = response1.getEntity(); InputStream is = entity1.getContent(); String html = IOUtils.toString(is, \"UTF-8\"); Document document = Jsoup.parse(html); ArrayList\u003cElement\u003e elements = document.select(\".js-issue-row\"); for (Element e : elements) { try { pr.add( new GitHubPullRequest(Integer.parseInt(e.child(0).child(1).child(0).attr(\"href\").substring(20)), e.child(0).child(1).child(0).text(), e.child(0).child(1).child(2).child(0).child(1).text()) ); } catch (RuntimeException e1) { pr.add( new GitHubPullRequest(Integer.parseInt(e.child(0).child(1).child(0).attr(\"href\").substring(20)), e.child(0).child(1).child(0).text(), e.child(0).child(1).child(3).child(0).child(1).text())); } } } finally { response1.close(); } return pr; } ","date":"2017-02-07","objectID":"/web%E5%89%8D%E5%90%8E%E7%AB%AF%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84%E5%8E%9F%E7%90%86/:1:2","tags":["学习笔记"],"title":"Web前后端基础架构原理","uri":"/web%E5%89%8D%E5%90%8E%E7%AB%AF%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84%E5%8E%9F%E7%90%86/"},{"categories":["学习笔记"],"content":"4 反爬虫 返回错误的状态码 states 401/403 返回错误的数据 ","date":"2017-02-07","objectID":"/web%E5%89%8D%E5%90%8E%E7%AB%AF%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84%E5%8E%9F%E7%90%86/:1:3","tags":["学习笔记"],"title":"Web前后端基础架构原理","uri":"/web%E5%89%8D%E5%90%8E%E7%AB%AF%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84%E5%8E%9F%E7%90%86/"},{"categories":["学习笔记"],"content":"5 HTTP method（方法） GET 获取 POST 发送 Request Payload(请求有效负载) 发送Json数据 放在http的body里面 PUT DELETE ","date":"2017-02-07","objectID":"/web%E5%89%8D%E5%90%8E%E7%AB%AF%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84%E5%8E%9F%E7%90%86/:1:4","tags":["学习笔记"],"title":"Web前后端基础架构原理","uri":"/web%E5%89%8D%E5%90%8E%E7%AB%AF%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84%E5%8E%9F%E7%90%86/"},{"categories":["学习笔记"],"content":"6 HTTP status(状态码) 301 永久移动，将地址移动另一个位置 4… 客户端错误 ","date":"2017-02-07","objectID":"/web%E5%89%8D%E5%90%8E%E7%AB%AF%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84%E5%8E%9F%E7%90%86/:1:5","tags":["学习笔记"],"title":"Web前后端基础架构原理","uri":"/web%E5%89%8D%E5%90%8E%E7%AB%AF%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84%E5%8E%9F%E7%90%86/"},{"categories":["学习笔记"],"content":"7 HTTP 请求 header 重要的header Response Header Request Header 请求 Accept* Cookie 登录凭证 User-Agent:区分浏览器 Referer：当前页面跳转过来的页面 响应 Content-Type:当前http响应类型 application/zip可以支持下载 img /jpeg 图片请求 Transfer-Encoding:传输编码 ","date":"2017-02-07","objectID":"/web%E5%89%8D%E5%90%8E%E7%AB%AF%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84%E5%8E%9F%E7%90%86/:1:6","tags":["学习笔记"],"title":"Web前后端基础架构原理","uri":"/web%E5%89%8D%E5%90%8E%E7%AB%AF%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84%E5%8E%9F%E7%90%86/"},{"categories":["学习笔记"],"content":"8 HTTP body HTTP request body 表单 K-V对 HTTP response body JSON HTML/XML 二进制（图片/下载文件） ","date":"2017-02-07","objectID":"/web%E5%89%8D%E5%90%8E%E7%AB%AF%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84%E5%8E%9F%E7%90%86/:1:7","tags":["学习笔记"],"title":"Web前后端基础架构原理","uri":"/web%E5%89%8D%E5%90%8E%E7%AB%AF%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84%E5%8E%9F%E7%90%86/"},{"categories":["学习笔记"],"content":"9 HTTP协议是无状态的 package com.github.hcsp.http; import com.alibaba.fastjson.JSON; import org.apache.http.HttpEntity; import org.apache.http.client.methods.CloseableHttpResponse; import org.apache.http.client.methods.HttpGet; import org.apache.http.client.methods.HttpPost; import org.apache.http.entity.StringEntity; import org.apache.http.impl.client.CloseableHttpClient; import org.apache.http.impl.client.HttpClients; import org.apache.http.util.EntityUtils; import java.io.IOException; import java.util.HashMap; import java.util.Map; public class Crawler { public class Crawler { public static String loginAndGetResponse(String username, String password) {} public static String loginAndGetResponse(String username, String password) throws IOException { CloseableHttpClient httpclient = HttpClients.createDefault(); HttpPost httpPost = new HttpPost(\"http://47.91.156.35:8000/auth/login\"); httpPost.addHeader(\"Content-Type\", \"application/json;charset=utf-8\"); httpPost.addHeader(\"User-Agent\", \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.100 Safari/537.36\"); Map\u003cString, String\u003e map = new HashMap\u003c\u003e(); map.put(\"username\", \"xdml\"); map.put(\"password\", \"xdml\"); String user = JSON.toJSONString(map); httpPost.setEntity(new StringEntity(user, \"utf-8\")); CloseableHttpResponse resp = httpclient.execute(httpPost); String cookie = resp.getFirstHeader(\"Set-Cookie\").getValue().split(\";\")[0]; HttpGet httpGet = new HttpGet(\"http://47.91.156.35:8000/auth\"); httpGet.addHeader(\"Cookie\", cookie); CloseableHttpResponse response1 = httpclient.execute(httpGet); HttpEntity entity1 = response1.getEntity(); String body = EntityUtils.toString(entity1, \"utf-8\"); return body; } } } ","date":"2017-02-07","objectID":"/web%E5%89%8D%E5%90%8E%E7%AB%AF%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84%E5%8E%9F%E7%90%86/:1:8","tags":["学习笔记"],"title":"Web前后端基础架构原理","uri":"/web%E5%89%8D%E5%90%8E%E7%AB%AF%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84%E5%8E%9F%E7%90%86/"},{"categories":["学习笔记"],"content":"Collection","date":"2017-01-30","objectID":"/collection/","tags":["学习笔记"],"title":"Collection","uri":"/collection/"},{"categories":["学习笔记"],"content":"1 Collection 体系原理及实战 Collection体系简介 Collection 包含一组元素 List/Set约定 List 一组有序的集合 Set 一组无序的集合 File Structure（Ctrl + 12） 查看当前类的所有方法 Collection 常用用方法 new:new ArrayList(Collection),new ArrayList() R:size()/isEmpty()/contains()/for()/stream() isEmpty():是否为空 contains():是否包含一个指定元素 C/U：add()/addAll()/retainAll() retainAll :保留Collection中有的元素 D：clear/remove()/removeAll() Collections工具方法集合 emptySet（）：等返回一个方便的空集合。 synchronizedCollection:将一个集合变成线程安全的 unmodifiableCollection:将一个集合变成不可变的（也可以使用Guava的Immutable） Collection其他实现： Queue（队列） 带有优先级的一组集合 具有插入、提取、检查 LILO (先进先出)：Last In Last Out。 Deque（线性集合） 在两端插入和删除元素 LinkedList （链表）、 PriorityQueue(优先级队列) ","date":"2017-01-30","objectID":"/collection/:1:0","tags":["学习笔记"],"title":"Collection","uri":"/collection/"},{"categories":["学习笔记"],"content":"2 List ArrayList 本质就是一个数组 ArrayList动态扩容的实现 创建一个更大的空间，然后把原先的所有元素拷贝过去 扩容调用的是grow()方法，通过grow()方法中调用的Arrays.copyof()方法进行对原数组的复制， 在通过调用System.arraycopy()方法进行复制，达到扩容的目的 新的数组的大小为原先的大小+原先大小的一半，也就是1.5倍的原先大小 属于线性复杂度 ArrayList扩容详解 ","date":"2017-01-30","objectID":"/collection/:2:0","tags":["学习笔记"],"title":"Collection","uri":"/collection/"},{"categories":["学习笔记"],"content":"3 Set Set 不允许有重复元素的集合（通过hashcode值在hash表中查找该元素是否有相同元素） 判断重复： equals方法 通过比较，实现Set功能 Java世界里第二个重要的约定：hashCode 同一个对象必须始终返回相同的hashCode 两个对象对的equals返回true，必须返回相同的hashCode 两个对象不等，也可能返回相同的hashCode 哈希算法 哈希就是一个单向的映射 所有的hashCode都是一个int 对象是无限的，所以无法将具体int值应映射到具体的对象 从任意对象到一个整数的hashCode HashSet 最常用，最高效的Set实现 哈希算法使得HashSet更高效 HashSet是无序的 LinkedHashSet 与插入顺序相同 TreeSet 有序的集合 使用Comparable约定，认为排序相等的元素相等 红黑树 ","date":"2017-01-30","objectID":"/collection/:3:0","tags":["学习笔记"],"title":"Collection","uri":"/collection/"},{"categories":["学习笔记"],"content":"4 Map Map的简介与实战 C/U：put()/putAll() R: get()/size() containsKey()/containsValue() containsKey():当前Map中是否包含某一个Key containsValue（）：是否包含某个Value KeySet()/values()/entrySet() keySet():key的集合。 keySet组成的Set的集合中的元素与Map中组成的元素具有关联，删除或修改Map中的元素，keySet中的元素也会随之影响。 values：value集合。 entrySet（）：返回一个键值对。 D:remove()/clear() HashMap 基于哈希表的集合，具有快速的查找优势。 HashSet就是HashMap HashMap扩容的过程 ：类似ArrayList扩容，创建新的Map。 HashMap扩容详解 HashMap线程不安全性，HashSet的实现没有同步。可能出现死循环现象 建议使用ConcurrentHashMap:并发的HashMap -Jdk7之后 将链表改为使用红黑树算法提高性能。为了处理同一个hash桶里的元素碰撞问题 。 ","date":"2017-01-30","objectID":"/collection/:4:0","tags":["学习笔记"],"title":"Collection","uri":"/collection/"},{"categories":["学习笔记"],"content":"5 Guava Lists/Sets/Maps ImmutableMap/ImmutableSet(不可变的集合) Multiset/Multimap（显示相同元素次数/一个Kay对应多个value） BiMap（双向键值对，可以通过value映射到Key） ","date":"2017-01-30","objectID":"/collection/:5:0","tags":["学习笔记"],"title":"Collection","uri":"/collection/"},{"categories":["学习笔记"],"content":"6 List排序常用方法 三种按照属性中的某一个字段排序的方法 ","date":"2017-01-30","objectID":"/collection/:6:0","tags":["学习笔记"],"title":"Collection","uri":"/collection/"},{"categories":["学习笔记"],"content":"6.1 stream写法 //按提交时间降序--stream写法 //根据参数查询符合的实体列表 List\u003cCompany\u003e companyList =this.mapper.selectCompany(param); //根据创建时间倒排 companyList = companyList.stream().sorted(Comparator.comparing(Company::getCreateTime).reversed()).collect(Collectors.toList()); ","date":"2017-01-30","objectID":"/collection/:6:1","tags":["学习笔记"],"title":"Collection","uri":"/collection/"},{"categories":["学习笔记"],"content":"6.2 Collections写法 //按提交时间降序 --Lamdba表达式 Collections.sort(companyList, (a, b) -\u003e b.getCreateTime().compareTo(a.getCreateTime())); ","date":"2017-01-30","objectID":"/collection/:6:2","tags":["学习笔记"],"title":"Collection","uri":"/collection/"},{"categories":["学习笔记"],"content":"6.3 借助工具类—常规写法 /按提交时间降序--工具类写法 SortListUtil.sort(companyList,\"createTime\",\"desc\"); ","date":"2017-01-30","objectID":"/collection/:6:3","tags":["学习笔记"],"title":"Collection","uri":"/collection/"},{"categories":["学习笔记"],"content":"6.4 示例 package com.github.hcsp.collection; import java.util.*; import java.util.stream.Collectors; public class Main { // 请编写一个方法，对传入的List\u003cUser\u003e进行如下处理： // 返回一个从部门名到这个部门的所有用户的映射。同一个部门的用户按照年龄进行从小到大排序。 // 例如，传入的users是[{name=张三, department=技术部, age=40 }, {name=李四, department=技术部, age=30 }, // {name=王五, department=市场部, age=40 }] // 返回如下映射： // 技术部 -\u003e [{name=李四, department=技术部, age=30 }, {name=张三, department=技术部, age=40 }] // 市场部 -\u003e [{name=王五, department=市场部, age=40 }] public static Map\u003cString, List\u003cUser\u003e\u003e collect(List\u003cUser\u003e users) { Map\u003cString, List\u003cUser\u003e\u003e map = new HashMap\u003c\u003e(); //将所有用户按年龄从小到大排序 List\u003cUser\u003e list = users.stream().sorted(Comparator.comparing(User::getAge)).collect(Collectors.toList()); for (User user : list) { //当前的用户所在的部门是否存在 //如果存在就将当前用户添加到对应的list中 if (map.containsKey(user.getDepartment())) { map.get(user.getDepartment()).add(user); } else { //如果不存在就向Map中添加一个新的键值 map.put(user.getDepartment(), new ArrayList\u003c\u003e(Collections.singleton(user))); } } return map; } public static void main(String[] args) { System.out.println( collect( Arrays.asList( new User(1, \"张三\", 40, \"技术部\"), new User(2, \"李四\", 30, \"技术部\"), new User(3, \"王五\", 40, \"市场部\")))); } } User package com.github.hcsp.collection; import java.util.Objects; public class User { // 用户的id private final Integer id; // 用户的姓名 private final String name; // 用户的年龄 private final int age; // 用户的部门，例如\"技术部\"/\"市场部\" private final String department; public User(Integer id, String name, int age, String department) { this.id = id; this.name = name; this.age = age; this.department = department; } public Integer getId() { return id; } public String getName() { return name; } public int getAge() { return age; } public String getDepartment() { return department; } @Override public boolean equals(Object o) { if (this == o) { return true; } if (o == null || getClass() != o.getClass()) { return false; } User person = (User) o; return Objects.equals(id, person.id); } @Override public int hashCode() { return Objects.hash(id); } @Override public String toString() { return department+\"-\u003e\"+\"\"; } } ","date":"2017-01-30","objectID":"/collection/:6:4","tags":["学习笔记"],"title":"Collection","uri":"/collection/"},{"categories":[],"content":"数据库浅谈","date":"2016-03-08","objectID":"/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%B5%85%E8%B0%88/","tags":[],"title":"数据库浅谈","uri":"/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%B5%85%E8%B0%88/"},{"categories":[],"content":"数据库浅谈 数据库提供结构化数据的持久化存储 索引保证数据查询的速度 事务原子性保证数据不丢失 多件事情要么不发生，要么都发生 ","date":"2016-03-08","objectID":"/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%B5%85%E8%B0%88/:0:0","tags":[],"title":"数据库浅谈","uri":"/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%B5%85%E8%B0%88/"},{"categories":[],"content":"数据库实战 Schema：设计自己的第一个数据库 数据库的类型与SQL语句 行与列 数据的外键 JDBC简介 Java Database Connection 通过连接数据库字符串，读取数据库信息 H2简介 使用JDBC存储数据 ","date":"2016-03-08","objectID":"/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%B5%85%E8%B0%88/:1:0","tags":[],"title":"数据库浅谈","uri":"/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%B5%85%E8%B0%88/"},{"categories":[],"content":"DDL-SQL create table 建表语句 drop table 删表语句 alter table 修表语句 ","date":"2016-03-08","objectID":"/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%B5%85%E8%B0%88/:1:1","tags":[],"title":"数据库浅谈","uri":"/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%B5%85%E8%B0%88/"},{"categories":[],"content":"基本SQL insert into 增 例：insert into user(name ,password,tel , avatar,created, updated_at) values(‘zhangsan’,‘1111’,‘111111’,‘http:asd.jpg’,now(),now()) delete from 删 例：delete from user where id=2; 物理删除，数据从磁盘删除掉 逻辑删除。数据还在磁盘， 删除id为2的用户 update user set status=0 UPDATED_AT=now() where id=2 update 改 alter table user add status tinyint not null default 1 ","date":"2016-03-08","objectID":"/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%B5%85%E8%B0%88/:1:2","tags":[],"title":"数据库浅谈","uri":"/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%B5%85%E8%B0%88/"},{"categories":[],"content":"select 查 select * select count(*)count(1) select max /min/avg select limit 分页 select order by 排序 select is null/is not null create table order(id,name,user,update,update_at,created_at) select * from user limit \u003c从第几个元素查找\u003e,\u003c最多返回多少个元素\u003e =》分页 group by ：按照一个列分组 select ADDRESS,count(*) as count from user group by ADDRESS join 将多个表联合起来 Lift join 外连接 inner join 内连接 select \"ORDER\".id ,\"ORDER\".USER_ID,\"ORDER\".GOODS_ID,GOODS.NAME from \"ORDER\" inner join GOODS on \"ORDER\".GOODS_ID = GOODS.id distinct:去掉重复得元素 select * from user where id in ( select USER_ID from \"ORDER\" where GOODS = 1 ) ","date":"2016-03-08","objectID":"/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%B5%85%E8%B0%88/:1:3","tags":[],"title":"数据库浅谈","uri":"/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%B5%85%E8%B0%88/"},{"categories":[],"content":"数据库表的设计原则 每个实体一张表（用户/商品） 每个实体都有一个主键 按照业务需要创建索引 每个关系用一张表联系 SQL语句不区分大小写 数据区分大小写 命名风格是 下划线区分两个单词 数据库中字符串是单引号的 数据库中的注释是 - - 分号分隔多个SQL语句 ","date":"2016-03-08","objectID":"/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%B5%85%E8%B0%88/:1:4","tags":[],"title":"数据库浅谈","uri":"/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%B5%85%E8%B0%88/"},{"categories":[],"content":"使用JDBC连接数据库 JDBC连接 连接串 用户名 密码 Statement PrepareStatement 防止SQL注入 ResultSet ","date":"2016-03-08","objectID":"/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%B5%85%E8%B0%88/:1:5","tags":[],"title":"数据库浅谈","uri":"/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%B5%85%E8%B0%88/"},{"categories":[],"content":"Sql注入 没验证传入的参数，使攻击者使用sql语句进行攻击 JDBC防范入侵 ","date":"2016-03-08","objectID":"/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%B5%85%E8%B0%88/:2:0","tags":[],"title":"数据库浅谈","uri":"/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%B5%85%E8%B0%88/"},{"categories":["学习笔记"],"content":"Maven or Java的包管理","date":"2016-01-20","objectID":"/blog/","tags":["学习笔记"],"title":"包管理","uri":"/blog/"},{"categories":["学习笔记"],"content":"1 包 一个包是一个命名空间，它组织一组相关的类和接口。 包是存放类及相关文件的文件夹。 classPath：存放类的文件路径或者类的压缩包路径。 ","date":"2016-01-20","objectID":"/blog/:1:0","tags":["学习笔记"],"title":"包管理","uri":"/blog/"},{"categories":["学习笔记"],"content":"2 包管理 包管理作用：帮助JVM找到所需的第三方类库。 包管理演化： 最初通过命令行加载类文件 Apache Ant ：使用xml进行包管理。 需手动下载相关类库 XML配置指定源代码目录、依赖的jar包、输出目录等。 Maven包管理： Maven最核心的核心理念 -\u003e 约定优于配置 按照一定约定为所有的包编号 通过传递性依赖下载相应的包 Maven的中央仓库 -\u003e 按照一定约定存储包 Maven的本地仓库 默认位于~/.m2 =\u003e存放第三方包 \u003cproject\u003e \u003cmodelVersion\u003e4.0.0\u003c/modelVersion\u003e \u003cgroupId\u003ecom.test\u003c/groupId\u003e \u003cartifactId\u003emy-project\u003c/artifactId\u003e \u003cversion\u003e1.0\u003c/version\u003e \u003c/project\u003e 语义化版本 X.Y.Z 版本格式：主版本号.次版本号.修订号 X：主版本号，当我们做了不兼容或者颠覆性的更新，修改此版本号。 Y：此版本号，当我们做了向下兼容的功能性修改，修改此版本号。 Z：修订号，当我们做了向下兼容的问题修正，修改此版本号。 SNAPSHOT快照版本 开发中使用 可以频繁修改版本号 ","date":"2016-01-20","objectID":"/blog/:2:0","tags":["学习笔记"],"title":"包管理","uri":"/blog/"},{"categories":["学习笔记"],"content":"3 包冲突及解决 传递性依赖的自动管理 原则:绝对不允许最终的classpath出现同名不同版本的jar包 当出现不同同名不同版本jar包时最近胜出 Maven 解决原则： 最近的胜出 如何查看依赖关系 通过idea的Maven按钮查看依赖关系。 通过命令查看依赖关系 mvn dependency:tree 解决方法 直接引入想要的版本 通过标签排除不想要的版本 \u003cexclusions\u003e \u003cexclusion\u003e \u003cgroupId\u003e\u003c/groupId\u003e \u003cartifactId\u003e\u003c/artifactId\u003e \u003c/exclusion\u003e \u003c/exclusions\u003e 通过idea插件 Maven Helper插件 scope 标签 scope 是用来限制 dependency 的作用范围的，影响 maven 项目在各个生命周期时导入的 package 的状态，主要管理依赖的部署。 scope 标签作用 test Maven依赖只在测试环境有效 compile 适用于所有阶段 provided 编译和测试时有效，但是该依赖在运行时由服务器提供，并且打包时也不会被包含进去。 provided 编译和测试时有效，但是该依赖在运行时由服务器提供，并且打包时也不会被包含进去。 \u003cscope\u003e\u003c/scope\u003e ","date":"2016-01-20","objectID":"/blog/:3:0","tags":["学习笔记"],"title":"包管理","uri":"/blog/"}]